<?php

/**
 * This is the model base class for the table "itemes_actividades".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ItemesActividades".
 *
 * Columns in table "itemes_actividades" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $item_presupuestario_id
 * @property integer $actividad_id
 * @property integer $monto
 *
 */
abstract class BaseItemesActividades extends GxActiveRecord {
	public $sumaMonto;
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'itemes_actividades';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Items Actividades|Items Actividades', $n);
	}

	public static function representingColumn() {
		return array(
			'item_presupuestario_id',
			'actividad_id',
		);
	}

	public function rules() {
		return array(
			array('item_presupuestario_id, actividad_id', 'required'),
			array('item_presupuestario_id, actividad_id, monto', 'numerical', 'integerOnly'=>true),
			array('monto', 'default', 'setOnEmpty' => true, 'value' => null),
			array('item_presupuestario_id, actividad_id, monto', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		  'itemesPresupuestarios' => array(self::BELONGS_TO, 'ItemesPresupuestarios', 'item_presupuestario_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'item_presupuestario_id' => null,
			'actividad_id' => null,
			'monto' => Yii::t('app', 'Monto'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('item_presupuestario_id', $this->item_presupuestario_id);
		$criteria->compare('actividad_id', $this->actividad_id);
		$criteria->compare('monto', $this->monto);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	
	public function buscarmontoporitemactividaddeproductoestra($productoestrategico_id) {
		$criteria = new CDbCriteria;
	
		$criteria->compare('item_presupuestario_id', $this->item_presupuestario_id);
		$criteria->compare('actividad_id', $this->actividad_id);
		$criteria->compare('monto', $this->monto);
		if(isset(Yii::app()->session['idPeriodo'])){
			$criteria->join='
					INNER JOIN actividades a ON t.actividad_id = a.id
					INNER JOIN indicadores i ON a.indicador_id = i.id
					INNER JOIN productos_especificos pe ON i.producto_especifico_id = pe.id
					INNER JOIN subproductos sp ON pe.subproducto_id = sp.id
					INNER JOIN productos_estrategicos pes ON sp.producto_estrategico_id = pes.id';
			$criteria->distinct =true;
			$criteria->select='t.*';
			$criteria->condition='pes.id='.$productoestrategico_id;
		}else{
			$criteria->condition='t.monto=0';
		}
		
		$montoitemactividad=ItemesActividades::model()->findAll($criteria);
		
		return $montoitemactividad;
	}
	
	public function sumaMontoPorActividad($idActividad){
		$criteria = new CDbCriteria;
		
		$criteria->select = 'SUM(monto) AS sumaMonto';
		$criteria->condition = 'actividad_id = '.$idActividad;
		
		$suma = ItemesActividades::model()->findAll($criteria);
		
		return $suma;
	}
}