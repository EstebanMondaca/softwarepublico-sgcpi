<?php

/**
 * This is the model base class for the table "productos_especificos".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ProductosEspecificos".
 *
 * Columns in table "productos_especificos" available as properties of the model,
 * followed by relations of table "productos_especificos" available as properties of the model.
 *
 * @property integer $id
 * @property integer $subproducto_id
 * @property string $nombre
 * @property string $descripcion
 * @property integer $estado
 *
 * @property Indicadores[] $indicadores
 * @property Subproductos $subproducto
 */
abstract class BaseProductosEspecificos extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'productos_especificos';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Productos Especificos|Productos Especificos', $n);
	}

	public static function representingColumn() {
		return 'nombre';
	}

	public function rules() {
		return array(
			array('nombre, descripcion', 'required'),
			array('subproducto_id, estado', 'numerical', 'integerOnly'=>true),
			array('nombre', 'length', 'max'=>200),
			array('subproducto_id', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, subproducto_id, nombre, descripcion, estado', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'indicadores' => array(self::HAS_MANY, 'Indicadores', 'producto_especifico_id'),
			'subproducto' => array(self::BELONGS_TO, 'Subproductos', 'subproducto_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'subproducto_id' => null,
			'nombre' => Yii::t('app', 'Nombre'),
			'descripcion' => Yii::t('app', 'DescripciÃ³n'),
			'estado' => Yii::t('app', 'Estado'),
			'indicadores' => null,
			'subproducto' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('subproducto_id', $this->subproducto_id);
		$criteria->compare('nombre', $this->nombre, true);
		$criteria->compare('descripcion', $this->descripcion, true);
		$criteria->compare('estado', 1);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	
	
    public static function productoEspecificoPorSub($id){
    	
    	$criteria = new CDbCriteria;
        $criteria->select = 't.*';
        $criteria->join ='INNER JOIN subproductos sb ON t.subproducto_id = sb.id';
        $criteria->condition='t.estado = 1 AND t.subproducto_id ='.$id;
        
        $productos = ProductosEspecificos::model()->findAll($criteria);
        
        return $productos;
    	
    	
    }
}