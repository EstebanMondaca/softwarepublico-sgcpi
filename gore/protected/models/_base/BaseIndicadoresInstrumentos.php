<?php

/**
 * This is the model base class for the table "indicadores_instrumentos".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "IndicadoresInstrumentos".
 *
 * Columns in table "indicadores_instrumentos" available as properties of the model,
 * followed by relations of table "indicadores_instrumentos" available as properties of the model.
 *
 * @property integer $id
 * @property integer $id_indicador
 * @property integer $id_instrumento
 * @property double $ponderacion
 * @property integer $estado
 *
 * @property Indicadores $idIndicador
 * @property Instrumentos $idInstrumento
 */
abstract class BaseIndicadoresInstrumentos extends GxActiveRecord {
	Public $producto_especifico_id,$producto_estrategico_id,$subproducto_id,$cargo_responsable_id,$centro_responsabilidad_id,$mg,$centro_costo_id;
	
	
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'indicadores_instrumentos';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Indicadores de Instrumentos|Indicadores de Instrumentos', $n);
	}

	public static function representingColumn() {
		return 'id';
	}

	public function rules() {
		return array(
			array('id_indicador, id_instrumento, ponderacion, estado', 'required'),
			array('id_indicador, id_instrumento, estado', 'numerical', 'integerOnly'=>true),
			array('ponderacion', 'numerical'),
			array('id, id_indicador, id_instrumento, ponderacion, estado', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'idIndicador' 			=> array(self::BELONGS_TO, 'Indicadores', 'id_indicador'),
			'idInstrumento' 		=> array(self::BELONGS_TO, 'Instrumentos', 'id_instrumento'),
			'productoEspecifico_id' => array(self::BELONGS_TO, 'ProductosEspecificos', 'producto_especifico_id'),
			'subProducto_id'		=> array(self::BELONGS_TO, 'Subproductos', 'subproducto_id'),
			'productoEstrategico_id'=> array(self::BELONGS_TO, 'Subproductos', 'producto_estrategico_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'id_indicador' => null,
			'id_instrumento' => null,
			'ponderacion' => Yii::t('app', 'Ponderacion'),
			'estado' => Yii::t('app', 'Estado'),
			'idIndicador' => null,
			'idInstrumento' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('id_indicador', $this->id_indicador);
		$criteria->compare('id_instrumento', $this->id_instrumento);
		$criteria->compare('ponderacion', $this->ponderacion);
		$criteria->compare('estado', $this->estado);
		$criteria->compare('pes.id', $this->producto_especifico_id);
		$criteria->compare('sp.id',$this->subproducto_id);
		$criteria->compare('pe.id',$this->producto_estrategico_id);
	    
		if(isset(Yii::app()->session['idPeriodo'])){

		$criteria->join=' 	INNER JOIN indicadores ind on t.id_indicador = ind.id
							INNER JOIN productos_especificos pes on ind.producto_especifico_id=pes.id
                			INNER JOIN subproductos sp on pes.subproducto_id=sp.id
			                INNER JOIN productos_estrategicos pe on sp.producto_estrategico_id=pe.id
			                INNER JOIN objetivos_productos op ON pe.id = op.producto_estrategico_id
			                INNER JOIN objetivos_estrategicos oe ON op.objetivo_estrategico_id = oe.id
			                INNER JOIN desafios_objetivos do2 ON  oe.id = do2.objetivo_estrategico_id
			                INNER JOIN desafios_estrategicos de ON do2.desafio_estrategico_id = de.id
			                INNER JOIN planificaciones pl ON de.planificacion_id = pl.id 
			                INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id';
            $criteria->distinct =true;
            $criteria->select='t.*, pes.id as producto_especifico_id, sp.id as subproducto_id, pe.id as producto_estrategico_id';
            $criteria->addCondition('t.estado = 1 AND pp.id = '.Yii::app()->session['idPeriodo']);
        
		}else{
            $criteria->condition='t.id=0';
        }
		
       // print_r ($criteria);
		

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	
	
	public function listadoIndicadoresInstrumentos(){
		$criteria = new CDbCriteria;
		$criteria->compare('id_indicador', $this->id);
		$criteria->compare('estado', 1);
		
		$indicador=IndicadoresInstrumentos::model()->findAll($criteria);
		
		$tmp="";
		
		foreach($indicador as $instrumento){
			$tmp.=$instrumento->idInstrumento;
		}
		return $tmp;
	}
	
}