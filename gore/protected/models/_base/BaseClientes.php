<?php

/**
 * This is the model base class for the table "clientes".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Clientes".
 *
 * Columns in table "clientes" available as properties of the model,
 * followed by relations of table "clientes" available as properties of the model.
 *
 * @property integer $id
 * @property integer $tipo_cliente_id
 * @property string $nombre
 * @property integer $estado
 *
 * @property TiposClientes $tipoCliente
 * @property ProductosEstrategicos[] $productosEstrategicoses
 */
abstract class BaseClientes extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'clientes';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Cliente|Clientes', $n);
	}

	public static function representingColumn() {
		return 'nombre';
	}

	public function rules() {
		return array(
			array('nombre, tipo_cliente_id', 'required'),
			array('tipo_cliente_id, estado', 'numerical', 'integerOnly'=>true),
			array('nombre', 'length', 'max'=>200),
			array('tipo_cliente_id', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, tipo_cliente_id, nombre, estado', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'tipoCliente' => array(self::BELONGS_TO, 'TiposClientes', 'tipo_cliente_id'),
			'productosEstrategicoses' => array(self::MANY_MANY, 'ProductosEstrategicos', 'productos_clientes(cliente_id, producto_estrategico_id)'),
		);
	}

	public function pivotModels() {
		return array(
			'productosEstrategicoses' => 'ProductosClientes',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'tipo_cliente_id' => null,
			'nombre' => Yii::t('app', 'Nombre'),
			'estado' => Yii::t('app', 'Estado'),
			'tipoCliente' => null,
			'productosEstrategicoses' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('tipo_cliente_id', $this->tipo_cliente_id);
		$criteria->compare('nombre', $this->nombre, true);
		$criteria->compare('estado', $this->estado);
		$criteria->condition='t.estado = 1';

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	
	public function buscarClientes() {
		$criteria = new CDbCriteria;
	
		$criteria->compare('id', $this->id);
		$criteria->compare('tipo_cliente_id', $this->tipo_cliente_id);
		$criteria->compare('nombre', $this->nombre, true);
		$criteria->compare('estado', $this->estado);
		if(isset(Yii::app()->session['idPeriodo'])){
			$criteria->join='
                    INNER JOIN productos_clientes pc ON t.id=pc.cliente_id
					INNER JOIN productos_estrategicos pe ON pc.producto_estrategico_id = pe.id
					INNER JOIN objetivos_productos op ON pe.id = op.producto_estrategico_id
                    INNER JOIN objetivos_estrategicos oe ON op.objetivo_estrategico_id = oe.id
                    INNER JOIN desafios_objetivos do2 ON  oe.id = do2.objetivo_estrategico_id
                    INNER JOIN desafios_estrategicos de ON do2.desafio_estrategico_id = de.id
                    INNER JOIN planificaciones pl ON de.planificacion_id = pl.id
                    INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id';
			$criteria->distinct =true;
			$criteria->select='t.*';
			$criteria->condition='pp.id = '.Yii::app()->session['idPeriodo'].' AND t.estado = 1 AND pe.estado=1';
		}else{
			$criteria->condition='t.id=0';
		}
	
		$clientes = Clientes::model()->findAll($criteria);
		
		return $clientes;
	}
}