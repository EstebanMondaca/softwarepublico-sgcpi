<?php

/**
 * This is the model base class for the table "la_elem_gestion".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "LaElemGestion".
 *
 * Columns in table "la_elem_gestion" available as properties of the model,
 * followed by relations of table "la_elem_gestion" available as properties of the model.
 *
 * @property integer $id
 * @property integer $id_la
 * @property integer $id_elem_gestion
 * @property integer $id_planificacion
 * @property integer $puntaje_actual
 * @property integer $puntaje_esperado
 * @property integer $puntaje_real
 * @property integer $puntaje_revisado
 * @property integer $estado
 * @property string $archivo
 * @property string $fecha
 * @property Planificaciones $idPlanificacion
 * @property ElementosGestion $idElemGestion
 * @property LineasAccion $idLa
 */
abstract class BaseLaElemGestion extends GxActiveRecord {
	public $crit, $sub, $idCrt, $idElem, $puntaje_elemento, $id_elemento, $puntaje_actual, $elemento, $n_criterios, $n_subcriterios, $n_elementos;
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'la_elem_gestion';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Asociación de lineas de acción con Elementos de gestión|Asociación de lineas de acción con Elementos de gestión', $n);
	}

	public static function representingColumn() {
		return 'id';
	}

	public function rules() {
		return array(
			array('id_elem_gestion, id_planificacion, puntaje_esperado,estado', 'required'),
			array('id_la, id_elem_gestion, id_planificacion, puntaje_actual, puntaje_esperado, puntaje_real, puntaje_revisado, estado', 'numerical', 'integerOnly'=>true),
			array('archivo', 'file', 'types'=>'pdf','allowEmpty' => true,'maxSize'=>1024 * 1024 * 50),
			array('fecha', 'safe'),
			array('puntaje_actual, puntaje_esperado, puntaje_real, puntaje_revisado, archivo, fecha, estado', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, id_la, id_elem_gestion, id_planificacion, puntaje_actual, puntaje_esperado, puntaje_real, puntaje_revisado, archivo,evidencia, fecha, estado,evidencia', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'idPlanificacion' => array(self::BELONGS_TO, 'Planificaciones', 'id_planificacion'),
			'idElemGestion' => array(self::BELONGS_TO, 'ElementosGestion', 'id_elem_gestion'),
			'idLa' => array(self::BELONGS_TO, 'LineasAccion', 'id_la'),
		    'laElemGestionDoc' => array(self::HAS_MANY, 'LaElemGestionDocumentos', 'la_elem_id','condition'=>'laElemGestionDoc.estado=1' ),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'id_la' => null,
			'id_elem_gestion' => null,
			'id_planificacion' => null,
			'puntaje_actual' => Yii::t('app', 'Puntaje Actual'),
			'puntaje_esperado' => Yii::t('app', 'Puntaje Esperado'),
			'puntaje_real' => Yii::t('app', 'Puntaje Real'),
			'puntaje_revisado' => Yii::t('app', 'Puntaje Revisado'),
			'estado' => Yii::t('app', 'Estado'),
			'idPlanificacion' => null,
			'idElemGestion' => null,
			'idLa' => null,
			'archivo' => Yii::t('app', 'Documento con evidencia de avance'),
            'fecha' => Yii::t('app', 'Fecha'),
            'evidencia' => null,Yii::t('app', 'Evidencia'),
            
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('t.id', $this->id);
		$criteria->compare('t.id_la', $this->id_la);
		$criteria->compare('t.id_elem_gestion', $this->id_elem_gestion);
		$criteria->compare('t.id_planificacion', $this->id_planificacion);
		$criteria->compare('t.puntaje_actual', $this->puntaje_actual);
		$criteria->compare('t.puntaje_esperado', $this->puntaje_esperado);
		$criteria->compare('t.puntaje_real', $this->puntaje_real);
		$criteria->compare('t.puntaje_revisado', $this->puntaje_revisado);
		$criteria->compare('t.estado', 1);
        $criteria->compare('t.archivo', $this->archivo, true);
        $criteria->compare('t.fecha', $this->fecha, true);
        $criteria->compare('t.archivo', $this->archivo, true);
        $criteria->compare('t.evidencia', $this->evidencia, true);       
        $criteria->compare('pp.id', Yii::app()->session['idPeriodo']);
        $criteria->join='INNER JOIN planificaciones ps ON ps.id=t.id_planificacion AND ps.estado=1
                        INNER JOIN periodos_procesos pp ON ps.periodo_proceso_id = pp.id';
        
		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

    public function searchLineasAccion() {
        $criteria = new CDbCriteria;

        $criteria->compare('t.id', $this->id);
        $criteria->compare('t.id_la', $this->id_la);
        $criteria->compare('t.id_elem_gestion', $this->id_elem_gestion);
        $criteria->compare('t.id_planificacion', $this->id_planificacion);
        $criteria->compare('t.puntaje_actual', $this->puntaje_actual);
        $criteria->compare('t.puntaje_esperado', $this->puntaje_esperado);
        $criteria->compare('t.puntaje_real', $this->puntaje_real);
        $criteria->compare('t.puntaje_revisado', $this->puntaje_revisado);
        $criteria->compare('t.estado', 1);
        $criteria->compare('t.archivo', $this->archivo, true);
        $criteria->compare('t.fecha', $this->fecha, true);
        $criteria->compare('t.archivo', $this->archivo, true);
        $criteria->compare('t.evidencia', $this->evidencia, true);
        $criteria->compare('pp.id', Yii::app()->session['idPeriodo']);
        $criteria->join='INNER JOIN planificaciones ps ON ps.id=t.id_planificacion AND ps.estado=1
                        INNER JOIN periodos_procesos pp ON ps.periodo_proceso_id = pp.id';
        
        /*$criteria->with = array(
            'idElemGestion'
        );*/
        //$criteria->select='max(t.fecha) AS fecha,max(t.id) as id,t.puntaje_actual,t.puntaje_esperado';
        //$criteria->group='t.id_elem_gestion'; 
        //$criteria->having='MAX(t.fecha)';
       // $criteria->order = 't.fecha DESC';
        //$criteria->addCondition('t.fecha=(select max(fecha) from la_elem_gestion la1 where la1.id_elem_gestion = t.id_elem_gestion)');     
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
        
    }
    
    public function obtieneCriteriosPorElementosGestionAmi($data, $row){
    	
    	 $criteriosc='';
    	 $criteria = new CDbCriteria;
    	 $criteria->select='c.nombre AS crit, c.id';
    	 $criteria->join='INNER JOIN elementos_gestion eg ON t.id_elem_gestion = eg.id
    	 INNER JOIN subcriterios sb ON eg.id_subcriterio = sb.id
    	 INNER JOIN criterios c ON sb.id_criterio = c.id ';
    	 $criteria->compare('t.id_la', $data->id);
    	 $criteria->group='c.id';
    	 

    	 $criterios = LaElemGestion::model()->findAll($criteria);
		         for($i=0; $i <count($criterios); $i++){
		         	
		        	if($i == 0){
		        		$criteriosc = $criteriosc.$criterios[$i]['crit'].',';
		        		
		        	}else{
		        		$criteriosc = $criteriosc."<br />".$criterios[$i]['crit'];
		        	}
		        	
			         $criteria2 = new CDbCriteria;
			    	 $criteria2->select='sb.nombre AS sub, sb.id';
			    	 $criteria2->join='INNER JOIN elementos_gestion eg ON t.id_elem_gestion = eg.id
			    	 INNER JOIN subcriterios sb ON eg.id_subcriterio = sb.id';
			    	 $criteria2->compare('t.id_la', $data->id);
			    	 $criteria2->compare('sb.id_criterio', $criterios[$i]['id']);
			    	 $criteria2->group='sb.id';
			    	 
			    	 $subcriterios = LaElemGestion::model()->findAll($criteria2);
			    	 
			    	 for($j=0; $j<count($subcriterios);$j++){
			    	 	
			    	 	$criteriosc= $criteriosc."<br />&nbsp;&nbsp;".$subcriterios[$j]['sub'];
			    	 	
			    	 }
		         }

    	 return $criteriosc;
    	
    }
    public function obtieneCriteriosPorElementosGestionAmiReport($id){
    	
    	 $criteriosc='';
    	 $criteria = new CDbCriteria;
    	 $criteria->select='c.nombre AS crit, c.id';
    	 $criteria->join='INNER JOIN elementos_gestion eg ON t.id_elem_gestion = eg.id
    	 INNER JOIN subcriterios sb ON eg.id_subcriterio = sb.id
    	 INNER JOIN criterios c ON sb.id_criterio = c.id ';
    	 $criteria->compare('t.id_la', $id);
    	 $criteria->group='c.id';
    	 

    	 $criterios = LaElemGestion::model()->findAll($criteria);
		         for($i=0; $i <count($criterios); $i++){
		         	
		        	if($i == 0){
		        		$criteriosc = $criteriosc.$criterios[$i]['crit'].',';
		        		
		        	}else{
		        		$criteriosc = $criteriosc."<br />".$criterios[$i]['crit'];
		        	}
		        	
			         $criteria2 = new CDbCriteria;
			    	 $criteria2->select='sb.nombre AS sub, sb.id';
			    	 $criteria2->join='INNER JOIN elementos_gestion eg ON t.id_elem_gestion = eg.id
			    	 INNER JOIN subcriterios sb ON eg.id_subcriterio = sb.id';
			    	 $criteria2->compare('t.id_la', $id);
			    	 $criteria2->compare('sb.id_criterio', $criterios[$i]['id']);
			    	 $criteria2->group='sb.id';
			    	 
			    	 $subcriterios = LaElemGestion::model()->findAll($criteria2);
			    	 
			    	 for($j=0; $j<count($subcriterios);$j++){
			    	 	
			    	 	$criteriosc= $criteriosc."<br />&nbsp;&nbsp;".$subcriterios[$j]['sub'];
			    	 	
			    	 }
		         }

    	 return $criteriosc;
    	
    }
    
   public function obtienePonderacionPorElementosGestionAmi($data, $row){
   	
   		 
   $criteria = new CDbCriteria;
$criteria->select='e.id AS idElem, er.puntaje_actual AS puntaje_actual,  t.id, sb.puntaje_elemento';
$criteria->join='INNER JOIN elementos_gestion e ON t.id_elem_gestion = e.id INNER JOIN
    	 subcriterios sb ON e.id_subcriterio = sb.id
    	 INNER JOIN criterios cr ON cr.id =sb.id_criterio
    	 INNER JOIN elementos_gestion_responsable er ON er.elemento_gestion_id = e.id';
$criteria->condition='e.estado = 1 AND t.estado = 1 AND cr.estado = 1 AND er.estado = 1 AND planificacion_id = '.Yii::app()->session['idPlanificaciones'].' AND t.id_planificacion='.Yii::app()->session['idPlanificaciones'];
if($row != -1){
	$criteria->compare('t.id_la', $data->id);
}else{
	$criteria->compare('t.id_la', $data);
}
// $criteria->group='e.id';
$elementos = LaElemGestion::model()->findAll($criteria);

$datosPuntaje = array();
$resultado =0;
for($i=0; $i <count($elementos); $i++){
	$datosPuntaje = array();
	//echo '<br/>id elemento '.$elementos[$i]['idElem'];
//	echo ' id elemento '.$elementos[$i]['idElem'];
	//segunda consulta trae puntaje de la tabla de subcritetios para multiplicar la resta
	$datosPuntaje = LaElemGestion::model()->findAll(array('condition'=>'t.estado = 1 AND t.id_la IS NOT NULL AND t.id_elem_gestion='.$elementos[$i]['idElem'].' AND t.id_planificacion='.Yii::app()->session['idPlanificaciones'],'select'=>'t.puntaje_esperado'));
	//for para aplicar la formula de calculo
	//echo 'largo'.count($datosPuntaje);

	for($j=0; $j<count($datosPuntaje);$j++){
	
		if($datosPuntaje[$j]['puntaje_esperado']>=0&&$elementos[$j]['puntaje_elemento']!=NULL){
			$resultado = $resultado+($datosPuntaje[$j]['puntaje_esperado']-$elementos[$i]['puntaje_actual'])*$elementos[$i]['puntaje_elemento'];
			
		}

	//	echo '<br/> puntaje esperado ('.$datosPuntaje[$j]['puntaje_esperado'].'-'.$elementos[$i]['puntaje_actual'].'*'.$elementos[$i]['puntaje_elemento'].')';
		//	echo '<br/> puntaje actual '.$elementos[$i]['puntaje_actual'];
		//	echo '<br/> puntaje elemento'.$elementos[$j]['puntaje_elemento'];
	//	echo '<br/> resultado'.$resultado;
		//echo '<br/> resultadop'.$resultadop;
		//echo '<br/> resultado parcial <br/>'.$resultado;

	}//fin for
}

    	 return $resultado;
    	
    }
    
  
    
    public function elementosGestionPorAmi($idAMI){
    	
    	 $criteriosc='';
    	 $criteria = new CDbCriteria;
    	 $criteria->select='e.nombre AS elemento, e.id AS idElem, er.puntaje_actual AS puntaje_actual,  t.id,
    	  t.puntaje_esperado, t.puntaje_revisado, sb.puntaje_elemento AS puntaje_elemento,
    	   cr.n_criterio AS n_criterios, sb.n_subcriterio AS n_subcriterios, e.n_elementogestion AS n_elementos';
    	 $criteria->join='INNER JOIN elementos_gestion e ON t.id_elem_gestion = e.id INNER JOIN
    	 subcriterios sb ON e.id_subcriterio = sb.id
    	 INNER JOIN criterios cr ON cr.id =sb.id_criterio
    	 INNER JOIN elementos_gestion_responsable er ON er.elemento_gestion_id = e.id';
    	 $criteria->condition='e.estado = 1 AND t.estado = 1 AND cr.estado = 1 AND er.estado = 1 AND planificacion_id = '.Yii::app()->session['idPlanificaciones'].' AND t.id_planificacion='.Yii::app()->session['idPlanificaciones'];
    	 $criteria->compare('t.id_la', $idAMI);
    	// $criteria->group='e.id';
    	 $elementos = LaElemGestion::model()->findAll($criteria);
    	 
    	 return $elementos;
    	
    }
    
    public function getCriterios($id_am){
    	
    	 $criteriosc=array();
    	 $subcriterios = '';
    	 $criteria = new CDbCriteria;
    	 $criteria->select='c.nombre AS crit';
    	 $criteria->join='INNER JOIN elementos_gestion eg ON t.id_elem_gestion = eg.id
    	 INNER JOIN subcriterios sb ON eg.id_subcriterio = sb.id
    	 INNER JOIN criterios c ON sb.id_criterio = c.id ';
    	 $criteria->compare('t.id_la', $id_am);
    	 $criteria->group='c.id';
    	 $criterios = LaElemGestion::model()->findAll($criteria);
		 return $criterios;     
    	
    }
    
    public function getSubcriterios($id_am){
    	
    	 $criteriosc=array();
    	 $subcriterios = '';
    	 $criteria = new CDbCriteria;
    	 $criteria->select='sb.nombre AS sub';
    	 $criteria->join='INNER JOIN elementos_gestion eg ON t.id_elem_gestion = eg.id
    	 INNER JOIN subcriterios sb ON eg.id_subcriterio = sb.id';
    	 $criteria->compare('t.id_la', $id_am);
    	 $criteria->group='sb.id';

    	 $subcriterios = LaElemGestion::model()->findAll($criteria);
		 return $subcriterios;     
    	
    }
    
    //trae todos los la_elem_gestion para un criterio
	public function getSumaPuntajes($idCriterio){
		
		$puntajes=array();
		$puntajes = '';
		$criteria = new CDbCriteria;
		$criteria->select='t.puntaje_revisado, t.puntaje_actual, t.id, t.fecha';
		$criteria->join='INNER JOIN elementos_gestion eg ON t.id_elem_gestion = eg.id
    	 INNER JOIN subcriterios sb ON eg.id_subcriterio = sb.id
		 INNER JOIN criterios cr ON sb.id_criterio = cr.id';
		$criteria->condition = 'cr.id ='.$idCriterio.' AND t.estado = 1';
		
		//si se selecciona un periodo
		/*if(isset(Yii::app()->session['idPeriodo'])){
			$criteria->addCondition('t.id_planificacion='.Yii::app()->session['idPeriodo']);
		}*/
		$criteria->group='t.id';
		$puntajes = LaElemGestion::model()->findAll($criteria);
		return $puntajes;
		
	}
	
	public function puntajeRevisadoPorElemento($data, $row){
		
		$puntajeActual='';
		
		if($row != -1){
			$indicadores = LaElemGestion::model()->findAll(array('condition'=>'t.puntaje_revisado IS NOT NULL AND id_la IS NULL AND t.id_elem_gestion='.$data->id.' AND t.id_planificacion='.Yii::app()->session['idPlanificaciones'],'order'=>'t.fecha DESC,t.id DESC','select'=>'t.puntaje_revisado'));
		}else{
			$indicadores = LaElemGestion::model()->findAll(array('condition'=>'t.puntaje_revisado IS NOT NULL AND id_la IS NULL AND t.id_elem_gestion='.$data.' AND t.id_planificacion='.Yii::app()->session['idPlanificaciones'],'order'=>'t.fecha DESC,t.id DESC','select'=>'t.puntaje_revisado'));
		}
		if($indicadores){
			$puntajeActual=$indicadores[0]->puntaje_revisado;
		}else{
			$puntajeActual = 'S.I.';
		}
		return $puntajeActual;
		
	}//fin funcion
	


}
