<?php

/**
 * This is the model base class for the table "desafios_estrategicos".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "DesafiosEstrategicos".
 *
 * Columns in table "desafios_estrategicos" available as properties of the model,
 * followed by relations of table "desafios_estrategicos" available as properties of the model.
 *
 * @property integer $id
 * @property integer $perspectiva_estrategica_id
 * @property integer $planificacion_id
 * @property string $nombre
 * @property string $descripcion
 * @property integer $estado
 *
 * @property PerspectivasEstrategicas $perspectivaEstrategica
 * @property Planificaciones $planificacion
 * @property ObjetivosEstrategicos[] $objetivosEstrategicoses
 */
abstract class BaseDesafiosEstrategicos extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'desafios_estrategicos';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Desafíos Estratégicos|Desafíos Estratégicoses', $n);
	}

	public static function representingColumn() {
		return 'nombre';
	}

	public function rules() {
		return array(
			array('nombre, descripcion,perspectiva_estrategica_id', 'required'),
			//array('nombre','www'),
			array('perspectiva_estrategica_id, planificacion_id, estado', 'numerical', 'integerOnly'=>true),
			array('nombre', 'length', 'max'=>200),
			array('perspectiva_estrategica_id, planificacion_id, estado', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, perspectiva_estrategica_id, planificacion_id, nombre, descripcion, estado', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		    'desafioDesafios' => array(self::HAS_MANY, 'DesafioDesafio', 'desafio_estrategico_id'),
            'desafioDesafios1' => array(self::HAS_MANY, 'DesafioDesafio', 'desafio_estrategico_mm_id'),            
            //'desafioDesafios' => array(self::MANY_MANY, 'DesafiosEstrategicos', 'desafio_desafio(desafio_estrategico_id,desafio_estrategico_mm_id)'),
			'perspectivaEstrategica' => array(self::BELONGS_TO, 'PerspectivasEstrategicas', 'perspectiva_estrategica_id'),
			'planificacion' => array(self::BELONGS_TO, 'Planificaciones', 'planificacion_id'),
			'objetivosEstrategicoses' => array(self::MANY_MANY, 'ObjetivosEstrategicos', 'desafios_objetivos(desafio_estrategico_id, objetivo_estrategico_id)','condition'=>'objetivosEstrategicoses.estado=1'),
		);
	}

	public function pivotModels(){
		return array(
			'objetivosEstrategicoses' => 'DesafiosObjetivos',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'perspectiva_estrategica_id' => 'Perspectivas Estrátegicas del BSC',
			'planificacion_id' => null,
			'nombre' => Yii::t('app', 'Desafío Estratégico'),
			'descripcion' => Yii::t('app', 'Descripción'),
			'estado' => Yii::t('app', 'Estado'),
			'perspectivaEstrategica' => 'Perspectivas Estrátegicas del BSC',
			'planificacion' => null,
			'objetivosEstrategicoses' => 'Objetivos Estratégicos',
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('perspectiva_estrategica_id', $this->perspectiva_estrategica_id);
		$criteria->compare('planificacion_id', $this->planificacion_id);
		$criteria->compare('nombre', $this->nombre, true);
		$criteria->compare('descripcion', $this->descripcion, true);
		$criteria->compare('estado', $this->estado);
        if(isset(Yii::app()->session['idPeriodo'])){
            $criteria->join='INNER JOIN planificaciones p ON t.planificacion_id=p.id 
            inner join periodos_procesos pp on pp.id=p.periodo_proceso_id';
            $criteria->distinct =true;
            $criteria->select='t.*';
            $criteria->condition='pp.id = '.Yii::app()->session['idPeriodo'].' AND t.estado = 1';
        }else{
            $criteria->condition='t.id=0';
        }
        
		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
    public function getPerspectivasEstrategicas()
    {
        return CHtml::listData(PerspectivasEstrategicas::model()->findAll(array('condition'=>'estado=1')), 'id','nombre');
    }
    public function getNombrePerspectivasEstrategicas()
    {
        return CHtml::listData(PerspectivasEstrategicas::model()->findAll(array('condition'=>'estado=1')), 'id','nombre');
    }
    
    public function getPlanificaciones()
    {
        return CHtml::listData(Planificaciones::model()->findAll(array('condition'=>'estado=1')), 'id','nombre');
    }   
    
    public function getRelatedObjetivosEstrategicos(){
        
        $out=GxHtml::openTag('ul');
            foreach($this->objetivosEstrategicoses as $relatedModel) {
                if($relatedModel->estado==1){
                    $out.= GxHtml::openTag('li');
                    $out.= GxHtml::encode(GxHtml::valueEx($relatedModel));
                    if($relatedModel->productosEstrategicoses){
                        $out.=GxHtml::openTag('ul');
                        foreach($relatedModel->productosEstrategicoses as $prodEstra){
                            if($prodEstra->estado==1){
                                $out.= GxHtml::openTag('li');
                                $out.= GxHtml::link(GxHtml::encode(GxHtml::valueEx($prodEstra)), array('/productosEstrategicos/ver/', 'id' => $prodEstra->id));                                
                                $out.= GxHtml::closeTag('li');
                            }                            
                        }
                        $out.= GxHtml::closeTag('ul');
                    }
                    
                    $out.= GxHtml::closeTag('li');
                }
                
            }
            $out.= GxHtml::closeTag('ul');
          if(!$this->objetivosEstrategicoses)
                $out='<span class="null">No asignado</span>';
          
           return $out;
        
    }
    
    
//Busca Planificaciones del periodo actual pre seleccionado
   /* public function getPlanificaciones()
    {
        $sql = "SELECT id FROM 'planificaciones '".
        "LIMIT 1";
        $command=Yii::app()->db->createCommand($sql);
        $results=$command->query();
        
        return results;
        //return CHtml::listData(Planificaciones::model()->findAll(), 'id','nombre');
    }*/
}