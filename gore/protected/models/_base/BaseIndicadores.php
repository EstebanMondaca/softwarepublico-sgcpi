<?php

/**
 * This is the model base class for the table "indicadores".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Indicadores".
 *
 * Columns in table "indicadores" available as properties of the model,
 * followed by relations of table "indicadores" available as properties of the model.
 *
 * @property integer $id
 * @property integer $frecuencia_control_id
 * @property integer $unidad_id
 * @property integer $clasificacion_tipo_id
 * @property integer $producto_especifico_id
 * @property integer $tipo_formula_id
 * @property integer $clasificacion_dimension_id
 * @property integer $clasificacion_ambito_id
 * @property string $nombre
 * @property integer $ascendente
 * @property string $conceptoa
 * @property string $conceptob
 * @property string $conceptoc
 * @property string $formula
 * @property string $medio_verificacion
 * @property string $notas
 * @property string $efectivot3
 * @property string $efectivot2
 * @property string $efectivot1
 * @property string $meta_anual
 * @property string $meta_parcial
 * @property string $supuestos
 *
 * @property Actividades[] $actividades
 * @property FrecuenciasControles $frecuenciaControl
 * @property ProductosEspecificos $productoEspecifico
 * @property ClasificacionesAmbitos $clasificacionAmbito
 * @property ClasificacionesDimensiones $clasificacionDimension
 * @property ClasificacionesTipos $clasificacionTipo
 * @property Unidades $unidad
 * @property TiposFormulas $tipoFormula
 * @property TiposIndicadores[] $tiposIndicadores
 */
abstract class BaseIndicadores extends GxActiveRecord {

    public $id_indicador, $estrategico;
    public $id_formula;
    public $id_pro_estrategico, $avance_actual, $esperadoX;
    public $division, $meta_reportada, $cumple, $porcentajeCumplimiento, $metat_anual2;
    // Usadas en indicadores instrumentos
    public $producto_especifico_n,$producto_estrategico_n,$subproducto_n,$cargo_responsable_id,$centro_responsabilidad_id,$mg,$centro_costo_id,$la_nombre;
    Public $cargo, $division_n,$ambito_n,$ponderaciont,$ponderacioncdc,$ponderacionfh,$ponderacionpmg,$ponderacionmg;
    public $division_id, $value, $p_estra_nom, $fecha_inicio, $fecha_termino, $nom_actividad, $fecha, $esperado;
	public $tipos_formulas_formula, $usuario_r;//Obtiene la formula desde la tabla tipos_formulas
    public $centroCosto, $tipoProducto, $productoEstrategico, $cargo_nom, $ponderacion, $reponsableIdU, $reponsable;
    public $id_instrumentos, $ambito, $dimension, $territorial, $dsexo;
    public $subp_nombre, $instName, $unidad;
    public $pro_especifico_nom, $ascendente1, $frecuencia;
    public $nom_indicador, $inicio, $fin, $actividad;
    public $_productoEspecificoNombre = null;
   	public $_subproductoNombre = null;
   	public $_productoEstrategicoNombre = null;
   	public $_divisionNombre = null;
   	public $_centroCostoNombre = null;
   	public $_tipoProductoEstrategico = null;
   	public $_instrumentoNombre = null;
   	public $_cargoNombre = null;
   	public $_responsableNombre = null;
   	public $_tiposFormulaNombre = null;
   	public $value2 = 0;
   	//public $enero,$febrero,$marzo,$abril,$mayo,$junio,$julio,$agosto,$septiembre,$octubre,$noviembre,$diciembre;
   
   	///////////////////////////////////////////////////77
 	public function getTiposFormulaNombre()
	{
	    if ($this->_tiposFormulaNombre === null && $this->tipoFormula !== null)
	    {
	        $this->_tiposFormulaNombre = $this->tipoFormula->nombre;
	    }
	    return $this->_tiposFormulaNombre;
	}
	public function setTiposFormulaNombre($value)
	{
	    $this->_tiposFormulaNombre = $value;
	}
   	///////////////////////////////////////////////////
 	public function getResponsableNombre()
	{
	    if ($this->_responsableNombre === null && $this->user !== null)
	    {
	        $this->_responsableNombre = $this->user->nombres;
	    }
	    return $this->_responsableNombre;
	}
	public function setResponsableNombre($value)
	{
	    $this->_responsableNombre = $value;
	}
   	////////////////////////////////////////////
   	
 	public function getCargoNombre()
	{
	    if ($this->_cargoNombre === null && $this->responsable !== null)
	    {
	        $this->_cargoNombre = $this->responsable->cargo;
	    }
	    return $this->_cargoNombre;
	}
	public function setCargoNombre($value)
	{
	    $this->_cargoResponsable = $value;
	}
   	
   	//////////////////////////////////////////////
   	public function getInstrumentoNombre()
	{
	    if ($this->_instrumentoNombre === null && $this->indicadoresInstrumentoses !== null)
	    {
	    	$this->_instrumentoNombre =  $this->indicadoresInstrumentoses->idInstrumento->nombre;
	   
	    }
	    return $this->_instrumentoNombre;
	}
	public function setInstrumentoNombre($value)
	{
	    $this->_instrumentoNombre = $value;
	}
   	
  ////////////////////////////////////////
   	public function getTipoProductoEstrategico()
	{
	    if ($this->_tipoProductoEstrategico === null && $this->productoEspecifico !== null)
	    {
	        $this->_tipoProductoEstrategico = $this->productoEspecifico->subproducto->productoEstrategico->tipoProducto;
	    }
	    return $this->_tipoProductoEstrategico;
	}
	public function setTipoProductoEstrategico($value)
	{
	    $this->_tipoProductoEstrategico = $value;
	}
	
   	//////////////////////////////////
	public function getProductoEspecificoNombre()
	{
	    if ($this->_productoEspecificoNombre === null && $this->productoEspecifico !== null)
	    {
	        $this->_productoEspecificoNombre = $this->productoEspecifico->nombre;
	    }
	    return $this->_productoEspecificoNombre;
	}
	public function setProductoEspecificoNombre($value)
	{
	    $this->_productoEspecificoNombre = $value;
	}
	
	//////////////////////////////////////////////////
	public function getSubproductoNombre()
	{
	   if ($this->_subproductoNombre  === null && $this->productoEspecifico !== null)
	    {
	        $this->_subproductoNombre = $this->productoEspecifico->subproducto;
	    }
	    return $this->_subproductoNombre;
	}
	
	public function setSubproductoNombre($value)
	{
	    $this->_subproductoNombre = $value;
	}
	//////////////////////////////////////////////////
	public function getProductoEstrategicoNombre()
	{
	   if ($this->_productoEstrategicoNombre  === null && $this->productoEspecifico !== null)
	    {
	        $this->_productoEstrategicoNombre = $this->productoEspecifico->subproducto->productoEstrategico;
	        
	    }
	    return $this->_productoEstrategicoNombre;
	}
	
	public function setProductoEstrategicoNombre($value)
	{
	    $this->_productoEstrategicoNombre = $value;
	}
	
	//////////////////////////////////////////////////
	
	public function getDivisionNombre()
	{
	   if ($this->_divisionNombre  === null && $this->productoEspecifico !== null)
	    {
	        $this->_divisionNombre = $this->productoEspecifico->subproducto->centroCosto->division;
	    }
	    return $this->_divisionNombre;
	}
	
	public function setDivisionNombre($value)
	{
	    $this->_divisionNombre = $value;
	}
	
	
	//////////////////////////////////////////////////
	public function getCentroCostoNombre()
	{
	   if ($this->_centroCostoNombre  === null && $this->productoEspecifico !== null)
	    {
	        $this->_centroCostoNombre = $this->productoEspecifico->subproducto->centroCosto;
	    }
	    return $this->_centroCostoNombre;
	}
	
	public function setCentroCostoNombre($value)
	{
	    $this->_centroCostoNombre = $value;
	}
	
	/////////////////////////////////////////////////

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'indicadores';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'Indicadores|Indicadores', $n);
    }

    public static function representingColumn() {
        return 'nombre';
    }

    public function rules() {
        return array(
            array('asociacion_id, responsable_id, nombre,descripcion, ascendente,frecuencia_control_id,tipo_formula_id,clasificacion_ambito_id,meta_anual,conceptoa,clasificacion_dimension_id,clasificacion_tipo_id,supuestos,formula, medio_verificacion, notas', 'required'),
            array('asociacion_id, responsable_id, frecuencia_control_id, unidad_id, clasificacion_tipo_id, producto_especifico_id, tipo_formula_id, clasificacion_dimension_id, clasificacion_ambito_id, ascendente, estado', 'numerical', 'integerOnly'=>true),
            array('nombre, descripcion, efectivot3, efectivot2, efectivot1, meta_anual, meta_parcial', 'length', 'max'=>200),
            array('conceptoa, conceptob, conceptoc, formula, medio_verificacion, notas, supuestos, estado', 'safe'),
            array('frecuencia_control_id, unidad_id, clasificacion_tipo_id, producto_especifico_id, tipo_formula_id, clasificacion_dimension_id, clasificacion_ambito_id, conceptoa, conceptob, conceptoc, formula, medio_verificacion, notas, efectivot3, efectivot2, efectivot1, meta_anual, meta_parcial, supuestos', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id,asociacion_id, responsable_id,frecuencia_control_id, unidad_id, clasificacion_tipo_id, producto_especifico_id, tipo_formula_id, clasificacion_dimension_id, clasificacion_ambito_id, nombre, ascendente, conceptoa, conceptob, conceptoc, formula, medio_verificacion, notas, efectivot3, efectivot2, efectivot1, meta_anual, meta_parcial, supuestos', 'safe', 'on'=>'search'),
                        array('id,instrumentoNombre,hitosIndicadoresConceptoa, hitosIndicadoresConceptob, hitosIndicadoresConceptoc,tiposFormulaNombre,
             productoEspecificoNombre,responsableNombre,cargoResponsable, hitosIndicadoresMetaParcial
             ,tipoProductoEstrategico,value, divisionNombre, centroCostoNombre, productoEstrategicoNombre, subproductoNombre, asociacion_id, responsable_id,frecuencia_control_id, unidad_id, clasificacion_tipo_id, producto_especifico_id, tipo_formula_id, clasificacion_dimension_id, clasificacion_ambito_id, nombre, ascendente, conceptoa, conceptob, conceptoc, formula, medio_verificacion, notas, efectivot3, efectivot2, efectivot1, meta_anual, meta_parcial, supuestos', 'safe', 'on'=>'buscquedaAtributosModelos'),
        
              array('id,asociacion_id, responsable_id,frecuencia_control_id, unidad_id, clasificacion_tipo_id, producto_especifico_id, tipo_formula_id, clasificacion_dimension_id, clasificacion_ambito_id, nombre, ascendente, conceptoa, conceptob, conceptoc, formula, medio_verificacion, notas, efectivot3, efectivot2, efectivot1, meta_anual, meta_parcial, supuestos', 'safe', 'on'=>'search'),
                        array('id,hitosIndicadoresConceptoa, hitosIndicadoresConceptob, 
                        hitosIndicadoresConceptoc,tiposFormulaNombre,
             productoEspecificoNombre,responsableNombre,cargoResponsable, hitosIndicadoresMetaParcial
             ,tipoProductoEstrategico,divisionNombre, centroCostoNombre, productoEstrategicoNombre, 
             subproductoNombre, asociacion_id, responsable_id,frecuencia_control_id, 
             unidad_id, clasificacion_tipo_id, producto_especifico_id, tipo_formula_id, 
             clasificacion_dimension_id, clasificacion_ambito_id, nombre, ascendente, 
             conceptoa, conceptob, conceptoc, formula, medio_verificacion, notas, efectivot3,
              efectivot2, efectivot1, meta_anual, meta_parcial, supuestos', 'safe', 'on'=>'obtenerDatosExcel'),
             );
    }

    public function relations() {
        return array(
            'actividades' => array(self::HAS_MANY, 'Actividades', 'indicador_id'),
            'hitosIndicadores' =>array(self::HAS_MANY, 'HitosIndicadores', 'id_indicador'),
            'asociacion' => array(self::BELONGS_TO, 'Asociaciones', 'asociacion_id'),
            'responsable' => array(self::BELONGS_TO, 'User', 'responsable_id'),
            'frecuenciaControl' => array(self::BELONGS_TO, 'FrecuenciasControles', 'frecuencia_control_id'),
            'productoEspecifico' => array(self::BELONGS_TO, 'ProductosEspecificos', 'producto_especifico_id'),
            'clasificacionAmbito' => array(self::BELONGS_TO, 'ClasificacionesAmbitos', 'clasificacion_ambito_id'),
            'clasificacionDimension' => array(self::BELONGS_TO, 'ClasificacionesDimensiones', 'clasificacion_dimension_id'),
            'clasificacionTipo' => array(self::BELONGS_TO, 'ClasificacionesTipos', 'clasificacion_tipo_id'),
            'unidad' => array(self::BELONGS_TO, 'Unidades', 'unidad_id'),
            'tipoFormula' => array(self::BELONGS_TO, 'TiposFormulas', 'tipo_formula_id'),
            'tiposIndicadores' => array(self::MANY_MANY, 'TiposIndicadores', 'indicadores_tipos_indicadores(indicador_id, tipo_indicador_id)'),
            'user'=> array(self::BELONGS_TO, 'User', 'responsable_id'),
            'indicadoresObservaciones' => array(self::HAS_MANY, 'IndicadoresObservaciones', 'id_indicador'),
            'lineasAccions' => array(self::HAS_MANY, 'LineasAccion', 'id_indicador'),
			'indicadoresInstrumentoses' => array(self::HAS_MANY, 'IndicadoresInstrumentos', 'id_indicador'),
        );
    }

    public function pivotModels() {
        return array(
            'tiposIndicadores' => 'IndicadoresTiposIndicadores',
        );
    }

    public function attributeLabels() {
        return array(
            'id' => Yii::t('app', 'ID'),
            'asociacion_id' => Yii::t('app', 'Asociación'),
            'responsable_id'=> Yii::t('app', 'Responsable'),
            'frecuencia_control_id' => Yii::t('app', 'Frecuencia de Control'),
            'unidad_id' => null,
            'clasificacion_tipo_id' => Yii::t('app', 'Tipo'),
            'producto_especifico_id' => null,
            'tipo_formula_id' => Yii::t('app', 'Tipo Fórmula'),
            'clasificacion_dimension_id' => Yii::t('app', 'Dimensión'),
            'clasificacion_ambito_id' => Yii::t('app', 'Ámbito'),
            'nombre' => Yii::t('app', 'Nombre corto del Indicador'),
            'descripcion'=> Yii::t('app', 'Descripción del Indicador'),
            'ascendente' => Yii::t('app', 'Ascendente'),
            'conceptoa' => Yii::t('app', 'Concepto A'),
            'conceptob' => Yii::t('app', 'Concepto B'),
            'conceptoc' => Yii::t('app', 'Concepto C'),
            'formula' => Yii::t('app', 'Fórmula de Cálculo'),
            'medio_verificacion' => Yii::t('app', 'Medios de Verificación'),
            'notas' => Yii::t('app', 'Notas'),
            'efectivot3' => Yii::t('app', 'Efectivo Año t-3 '),
            'efectivot2' => Yii::t('app', 'Efectivo Año t-2 '),
            'efectivot1' => Yii::t('app', 'Meta Año t-1'),
            'meta_anual' => Yii::t('app', 'Meta Anual'),
            'meta_parcial' => Yii::t('app', 'Meta Parcial'),
            'supuestos' => Yii::t('app', 'Supuestos'),
            'actividades' => null,
            'frecuenciaControl' => null,
            'productoEspecifico' => null,
            'clasificacionAmbito' => null,
            'clasificacionDimension' => null,
            'clasificacionTipo' => null,
            'unidad' => null,
            'tipoFormula' => null,
            'tiposIndicadores' => null,
            'estado' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('asociacion_id', $this->asociacion_id);
        $criteria->compare('responsable_id', $this->responsable_id);
        $criteria->compare('frecuencia_control_id', $this->frecuencia_control_id);
        $criteria->compare('unidad_id', $this->unidad_id);
        $criteria->compare('clasificacion_tipo_id', $this->clasificacion_tipo_id);
        $criteria->compare('producto_especifico_id', $this->producto_especifico_id);
        $criteria->compare('tipo_formula_id', $this->tipo_formula_id);
        $criteria->compare('clasificacion_dimension_id', $this->clasificacion_dimension_id);
        $criteria->compare('clasificacion_ambito_id', $this->clasificacion_ambito_id);
        $criteria->compare('nombre', $this->nombre, true);
        $criteria->compare('descripcion', $this->descripcion, true);
        $criteria->compare('ascendente', $this->ascendente);
        $criteria->compare('conceptoa', $this->conceptoa, true);
        $criteria->compare('conceptob', $this->conceptob, true);
        $criteria->compare('conceptoc', $this->conceptoc, true);
        $criteria->compare('formula', $this->formula, true);
        $criteria->compare('medio_verificacion', $this->medio_verificacion, true);
        $criteria->compare('notas', $this->notas, true);
        $criteria->compare('efectivot3', $this->efectivot3, true);
        $criteria->compare('efectivot2', $this->efectivot2, true);
        $criteria->compare('efectivot1', $this->efectivot1, true);
        $criteria->compare('meta_anual', $this->meta_anual, true);
        $criteria->compare('meta_parcial', $this->meta_parcial, true);
        $criteria->compare('supuestos', $this->supuestos, true);
        $criteria->compare('estado', $this->estado);
        if(isset(Yii::app()->session['idPeriodo'])){
            $criteria->join=' 
                LEFT JOIN lineas_accion la on t.id=la.id_indicador and la.estado=1  
                LEFT JOIN productos_especificos pes on t.producto_especifico_id=pes.id and pes.estado=1
                LEFT JOIN subproductos sp on pes.subproducto_id=sp.id and sp.estado=1
                INNER JOIN productos_estrategicos pe on sp.producto_estrategico_id=pe.id or la.producto_estrategico_id=pe.id
                INNER JOIN objetivos_productos op ON pe.id = op.producto_estrategico_id
                INNER JOIN objetivos_estrategicos oe ON op.objetivo_estrategico_id = oe.id
                INNER JOIN desafios_objetivos do2 ON  oe.id = do2.objetivo_estrategico_id
                INNER JOIN desafios_estrategicos de ON do2.desafio_estrategico_id = de.id
                INNER JOIN planificaciones pl ON de.planificacion_id = pl.id 
                INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id';
            $criteria->distinct =true;
            $criteria->select='t.*';
            $criteria->condition='t.estado = 1  AND pp.id = '.Yii::app()->session['idPeriodo'];
        }else{
            $criteria->condition='t.id=0';
        }
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

//funcion utilizada para PresupuestoCentrosCostos
public function busquedaParaPresupuestos() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('asociacion_id', $this->asociacion_id);
        $criteria->compare('responsable_id', $this->responsable_id);
        $criteria->compare('frecuencia_control_id', $this->frecuencia_control_id);
        $criteria->compare('unidad_id', $this->unidad_id);
        $criteria->compare('clasificacion_tipo_id', $this->clasificacion_tipo_id);
        $criteria->compare('producto_especifico_id', $this->producto_especifico_id);
        $criteria->compare('tipo_formula_id', $this->tipo_formula_id);
        $criteria->compare('clasificacion_dimension_id', $this->clasificacion_dimension_id);
        $criteria->compare('clasificacion_ambito_id', $this->clasificacion_ambito_id);
        $criteria->compare('nombre', $this->nombre, true);
        $criteria->compare('descripcion', $this->descripcion, true);
        $criteria->compare('ascendente', $this->ascendente);
        $criteria->compare('conceptoa', $this->conceptoa, true);
        $criteria->compare('conceptob', $this->conceptob, true);
        $criteria->compare('conceptoc', $this->conceptoc, true);
        $criteria->compare('formula', $this->formula, true);
        $criteria->compare('medio_verificacion', $this->medio_verificacion, true);
        $criteria->compare('notas', $this->notas, true);
        $criteria->compare('efectivot3', $this->efectivot3, true);
        $criteria->compare('efectivot2', $this->efectivot2, true);
        $criteria->compare('efectivot1', $this->efectivot1, true);
        $criteria->compare('meta_anual', $this->meta_anual, true);
        $criteria->compare('meta_parcial', $this->meta_parcial, true);
        $criteria->compare('supuestos', $this->supuestos, true);
        $criteria->compare('estado', $this->estado);
        $criteria->compare('producto_especifico_id',$this->producto_especifico_id);
        
        if(isset(Yii::app()->session['idPeriodo'])){
            $criteria->join=' 
                LEFT JOIN lineas_accion la on t.id=la.id_indicador and la.estado=1                
                LEFT JOIN productos_especificos pes on t.producto_especifico_id=pes.id and pes.estado=1  
                LEFT JOIN subproductos sp on pes.subproducto_id=sp.id and sp.estado=1  
                INNER JOIN productos_estrategicos pe on (sp.producto_estrategico_id=pe.id or la.producto_estrategico_id=pe.id) AND pe.estado = 1
                INNER JOIN objetivos_productos op ON pe.id = op.producto_estrategico_id
                INNER JOIN objetivos_estrategicos oe ON op.objetivo_estrategico_id = oe.id
                INNER JOIN desafios_objetivos do2 ON  oe.id = do2.objetivo_estrategico_id
                INNER JOIN desafios_estrategicos de ON do2.desafio_estrategico_id = de.id
                INNER JOIN planificaciones pl ON de.planificacion_id = pl.id 
                INNER JOIN centros_costos cc on sp.centro_costo_id=cc.id or la.centro_costo_id=cc.id
                INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id';
            $criteria->distinct =true;
            $criteria->select='t.*, pp.descripcion';
            $criteria->addCondition('t.estado = 1 AND pp.id = '.Yii::app()->session['idPeriodo']);
        }else{
           $criteria->condition='t.id=0'; 
        }
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'sort'=>array(
                'defaultOrder'=>'cc.id ASC,pe.id ASC',
            ),
            'pagination' => array('pageSize' => 30,)
        ));
    }
 
//funcion utilizada para actividadesController
public function busquedaParaActividades() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('asociacion_id', $this->asociacion_id);
        $criteria->compare('responsable_id', $this->responsable_id);
        $criteria->compare('frecuencia_control_id', $this->frecuencia_control_id);
        $criteria->compare('unidad_id', $this->unidad_id);
        $criteria->compare('clasificacion_tipo_id', $this->clasificacion_tipo_id);
        $criteria->compare('producto_especifico_id', $this->producto_especifico_id);
        $criteria->compare('tipo_formula_id', $this->tipo_formula_id);
        $criteria->compare('clasificacion_dimension_id', $this->clasificacion_dimension_id);
        $criteria->compare('clasificacion_ambito_id', $this->clasificacion_ambito_id);
        $criteria->compare('nombre', $this->nombre, true);
        $criteria->compare('descripcion', $this->descripcion, true);
        $criteria->compare('ascendente', $this->ascendente);
        $criteria->compare('conceptoa', $this->conceptoa, true);
        $criteria->compare('conceptob', $this->conceptob, true);
        $criteria->compare('conceptoc', $this->conceptoc, true);
        $criteria->compare('formula', $this->formula, true);
        $criteria->compare('medio_verificacion', $this->medio_verificacion, true);
        $criteria->compare('notas', $this->notas, true);
        $criteria->compare('efectivot3', $this->efectivot3, true);
        $criteria->compare('efectivot2', $this->efectivot2, true);
        $criteria->compare('efectivot1', $this->efectivot1, true);
        $criteria->compare('meta_anual', $this->meta_anual, true);
        $criteria->compare('meta_parcial', $this->meta_parcial, true);
        $criteria->compare('supuestos', $this->supuestos, true);
        $criteria->compare('estado', $this->estado);
        $criteria->compare('producto_especifico_id',$this->producto_especifico_id);
        
        if(isset(Yii::app()->session['idPeriodo'])){
            $criteria->join=' 
                LEFT JOIN lineas_accion la on t.id=la.id_indicador and la.estado=1                
                LEFT JOIN productos_especificos pes on t.producto_especifico_id=pes.id and pes.estado=1
                LEFT JOIN subproductos sp on pes.subproducto_id=sp.id and sp.estado=1
                INNER JOIN productos_estrategicos pe on sp.producto_estrategico_id=pe.id or la.producto_estrategico_id=pe.id
                INNER JOIN objetivos_productos op ON pe.id = op.producto_estrategico_id
                INNER JOIN objetivos_estrategicos oe ON op.objetivo_estrategico_id = oe.id
                INNER JOIN desafios_objetivos do2 ON  oe.id = do2.objetivo_estrategico_id
                INNER JOIN desafios_estrategicos de ON do2.desafio_estrategico_id = de.id
                INNER JOIN planificaciones pl ON de.planificacion_id = pl.id 
                INNER JOIN centros_costos cc on sp.centro_costo_id=cc.id or la.centro_costo_id=cc.id
                INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id';
            $criteria->distinct =true;
            $criteria->select='t.*, pp.descripcion';
            $criteria->addCondition('t.estado = 1 AND pp.id = '.Yii::app()->session['idPeriodo']);
        }else{
           $criteria->condition='t.id=0'; 
        }
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'sort'=>array(
                'defaultOrder'=>'pe.id ASC',
            ),
            'pagination' => array('pageSize' => 30,)
        ));
    }
    
public function busquedaPersonalizada() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('asociacion_id', $this->asociacion_id);
        $criteria->compare('responsable_id', $this->responsable_id);
        $criteria->compare('frecuencia_control_id', $this->frecuencia_control_id);
        $criteria->compare('unidad_id', $this->unidad_id);
        $criteria->compare('clasificacion_tipo_id', $this->clasificacion_tipo_id);
        $criteria->compare('producto_especifico_id', $this->producto_especifico_id);
        $criteria->compare('tipo_formula_id', $this->tipo_formula_id);
        $criteria->compare('clasificacion_dimension_id', $this->clasificacion_dimension_id);
        $criteria->compare('clasificacion_ambito_id', $this->clasificacion_ambito_id);
        $criteria->compare('nombre', $this->nombre, true);
        $criteria->compare('descripcion', $this->descripcion, true);
        $criteria->compare('ascendente', $this->ascendente);
        $criteria->compare('conceptoa', $this->conceptoa, true);
        $criteria->compare('conceptob', $this->conceptob, true);
        $criteria->compare('conceptoc', $this->conceptoc, true);
        $criteria->compare('formula', $this->formula, true);
        $criteria->compare('medio_verificacion', $this->medio_verificacion, true);
        $criteria->compare('notas', $this->notas, true);
        $criteria->compare('efectivot3', $this->efectivot3, true);
        $criteria->compare('efectivot2', $this->efectivot2, true);
        $criteria->compare('efectivot1', $this->efectivot1, true);
        $criteria->compare('meta_anual', $this->meta_anual, true);
        $criteria->compare('meta_parcial', $this->meta_parcial, true);
        $criteria->compare('supuestos', $this->supuestos, true);
        $criteria->compare('estado', $this->estado);
        $criteria->compare('producto_especifico_id',$this->producto_especifico_id);
        
        if(isset(Yii::app()->session['idPeriodo'])){
            $criteria->join=' inner join productos_especificos pes on t.producto_especifico_id=pes.id
                INNER JOIN subproductos sp on pes.subproducto_id=sp.id
                INNER JOIN productos_estrategicos pe on sp.producto_estrategico_id=pe.id
                INNER JOIN objetivos_productos op ON pe.id = op.producto_estrategico_id
                INNER JOIN objetivos_estrategicos oe ON op.objetivo_estrategico_id = oe.id
                INNER JOIN desafios_objetivos do2 ON  oe.id = do2.objetivo_estrategico_id
                INNER JOIN desafios_estrategicos de ON do2.desafio_estrategico_id = de.id
                INNER JOIN planificaciones pl ON de.planificacion_id = pl.id 
                INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id';
            $criteria->distinct =true;
            $criteria->select='t.*, pp.descripcion';
            $criteria->addCondition('t.estado = 1 AND pp.id = '.Yii::app()->session['idPeriodo']);
        }
        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function busquedaParaFormularioH() {
    	$criteria = new CDbCriteria;
    
    	$criteria->compare('id', $this->id);
    	$criteria->compare('asociacion_id', $this->asociacion_id);
    	$criteria->compare('responsable_id', $this->responsable_id);
    	$criteria->compare('frecuencia_control_id', $this->frecuencia_control_id);
    	$criteria->compare('unidad_id', $this->unidad_id);
    	$criteria->compare('clasificacion_tipo_id', $this->clasificacion_tipo_id);
    	$criteria->compare('producto_especifico_id', $this->producto_especifico_id);
    	$criteria->compare('tipo_formula_id', $this->tipo_formula_id);
    	$criteria->compare('clasificacion_dimension_id', $this->clasificacion_dimension_id);
    	$criteria->compare('clasificacion_ambito_id', $this->clasificacion_ambito_id);
    	$criteria->compare('nombre', $this->nombre, true);
    	$criteria->compare('descripcion', $this->descripcion, true);
    	$criteria->compare('ascendente', $this->ascendente);
    	$criteria->compare('conceptoa', $this->conceptoa, true);
    	$criteria->compare('conceptob', $this->conceptob, true);
    	$criteria->compare('conceptoc', $this->conceptoc, true);
    	$criteria->compare('formula', $this->formula, true);
    	$criteria->compare('medio_verificacion', $this->medio_verificacion, true);
    	$criteria->compare('notas', $this->notas, true);
    	$criteria->compare('efectivot3', $this->efectivot3, true);
    	$criteria->compare('efectivot2', $this->efectivot2, true);
    	$criteria->compare('efectivot1', $this->efectivot1, true);
    	$criteria->compare('meta_anual', $this->meta_anual, true);
    	$criteria->compare('meta_parcial', $this->meta_parcial, true);
    	$criteria->compare('supuestos', $this->supuestos, true);
    	$criteria->compare('ii.ponderacion', $this->ponderacion);
    	$criteria->compare('estado', $this->estado);
    	if(isset(Yii::app()->session['idPeriodo'])){
    		$criteria->join='
    			LEFT JOIN indicadores_instrumentos ii on t.id=ii.id_indicador and ii.estado=1
    			LEFT JOIN instrumentos i on ii.id_instrumento = i.id and i.estado=1
    			LEFT JOIN lineas_accion la on t.id=la.id_indicador and la.estado=1
                LEFT JOIN productos_especificos pes on t.producto_especifico_id=pes.id and pes.estado=1
                LEFT JOIN subproductos sp on pes.subproducto_id=sp.id and sp.estado=1
                INNER JOIN productos_estrategicos pe on sp.producto_estrategico_id=pe.id or la.producto_estrategico_id=pe.id
                INNER JOIN objetivos_productos op ON pe.id = op.producto_estrategico_id
                INNER JOIN objetivos_estrategicos oe ON op.objetivo_estrategico_id = oe.id
                INNER JOIN desafios_objetivos do2 ON  oe.id = do2.objetivo_estrategico_id
                INNER JOIN desafios_estrategicos de ON do2.desafio_estrategico_id = de.id
                INNER JOIN planificaciones pl ON de.planificacion_id = pl.id
                INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id';
    		$criteria->distinct =true;
    		$criteria->select='t.*, ii.ponderacion as ponderacion';
    		$criteria->condition='t.estado = 1 AND  ii.estado=1 AND i.nombre = "FH" AND ii.ponderacion>0 AND t.asociacion_id!=3 AND pp.id = '.Yii::app()->session['idPeriodo'];
    	}else{
    		$criteria->condition='t.id=0 AND pp.id = '.Yii::app()->session['idPeriodo'];
    	}
	   	return new CActiveDataProvider($this, array(
    			'criteria' => $criteria,
    	));
    }
    
    public function busquedaParaFormularioHdoc() {
    	$criteria = new CDbCriteria;
    
    	$criteria->compare('id', $this->id);
    	$criteria->compare('nombre', $this->nombre, true);
    	$criteria->compare('formula', $this->formula, true);
    	$criteria->compare('medio_verificacion', $this->medio_verificacion, true);
    	$criteria->compare('notas', $this->notas, true);
    	$criteria->compare('efectivot3', $this->efectivot3, true);
    	$criteria->compare('efectivot2', $this->efectivot2, true);
    	$criteria->compare('efectivot1', $this->efectivot1, true);
    	$criteria->compare('meta_anual', $this->meta_anual, true);
    	$criteria->compare('meta_parcial', $this->meta_parcial, true);
    	$criteria->compare('supuestos', $this->supuestos, true);
    	$criteria->compare('estado', $this->estado);
        if(isset(Yii::app()->session['idPeriodo'])){
    		$criteria->join='
    			LEFT JOIN indicadores_instrumentos ii on t.id=ii.id_indicador and ii.estado=1
    			LEFT JOIN instrumentos i on ii.id_instrumento = i.id and i.estado=1
    			LEFT JOIN lineas_accion la on t.id=la.id_indicador and la.estado=1
                LEFT JOIN productos_especificos pes on t.producto_especifico_id=pes.id and pes.estado=1
                LEFT JOIN subproductos sp on pes.subproducto_id=sp.id and sp.estado=1
                INNER JOIN productos_estrategicos pe on sp.producto_estrategico_id=pe.id or la.producto_estrategico_id=pe.id
                INNER JOIN objetivos_productos op ON pe.id = op.producto_estrategico_id
                INNER JOIN objetivos_estrategicos oe ON op.objetivo_estrategico_id = oe.id
                INNER JOIN desafios_objetivos do2 ON  oe.id = do2.objetivo_estrategico_id
                INNER JOIN desafios_estrategicos de ON do2.desafio_estrategico_id = de.id
                INNER JOIN planificaciones pl ON de.planificacion_id = pl.id
                INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id';
    		$criteria->distinct =true;
    		$criteria->select='t.*, ii.ponderacion as ponderacion';
    		$criteria->condition='t.estado = 1 AND  ii.estado=1 AND i.nombre = "FH" AND ii.ponderacion>0 AND t.asociacion_id!=3 AND pp.id = '.Yii::app()->session['idPeriodo'];
    	}else{
    		$criteria->condition='t.id=0';
    	}

    	$indicadores=Indicadores::model()->findAll($criteria);
    	 
    	return $indicadores;
    }

    public static function indicadorUnUsuario($bandera){
    	
        $id_usuario=Yii::app()->user->id;   

        $sql='SELECT fc.plazo_maximo AS plazo_maximo, sb.nombre AS subp_nombre,
   		 pre.nombre AS pro_especifico_nom,fc.nombre AS frecuencia, t.*,
        pre.nombre AS p_estra_nom, t.nombre AS nom_indicador
        FROM indicadores t
     	INNER JOIN productos_especificos pe ON t.producto_especifico_id = pe.id
     	INNER JOIN subproductos sb ON pe.subproducto_id = sb.id 
     	INNER JOIN productos_estrategicos pre ON sb.producto_estrategico_id = pre.id
     	INNER JOIN frecuencias_controles fc ON t.frecuencia_control_id = fc.id
     	INNER JOIN users u ON u.id = t.responsable_id
     	INNER JOIN tipos_formulas tf ON tf.id = t.tipo_formula_id
     	INNER JOIN objetivos_productos op ON pre.id = op.producto_estrategico_id
        INNER JOIN objetivos_estrategicos oe ON op.objetivo_estrategico_id = oe.id
        INNER JOIN desafios_objetivos do2 ON  oe.id = do2.objetivo_estrategico_id
        INNER JOIN desafios_estrategicos de ON do2.desafio_estrategico_id = de.id
        INNER JOIN planificaciones pl ON de.planificacion_id = pl.id
        INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id
     	WHERE t.estado = 1 AND pe.estado = 1 AND sb.estado = 1 AND pre.estado = 1';

        if($bandera == 0){
        	$sql = $sql.' AND t.responsable_id='.$id_usuario;
        }else{
        	$sql = $sql.' AND t.id='.$bandera;
        }
		if(isset(Yii::app()->session['idPeriodo'])){
			$sql =  $sql.' AND pp.id = '.Yii::app()->session['idPeriodo'];
		}
		
     	$sql=$sql.' UNION 
     	SELECT fc2.plazo_maximo AS plazo_maximo, la.nombre AS subp_nombre,
     	la.nombre AS pro_especifico_nom,
     	fc2.nombre AS frecuencia, t2.*, pre2.nombre AS p_estra_nom, t2.nombre AS nom_indicador
     	FROM indicadores t2
     	INNER JOIN lineas_accion la ON la.id_indicador = t2.id
     	INNER JOIN productos_estrategicos pre2 ON la.producto_estrategico_id = pre2.id
     	INNER JOIN frecuencias_controles fc2 ON t2.frecuencia_control_id = fc2.id
     	INNER JOIN users u ON u.id = t2.responsable_id
     	INNER JOIN objetivos_productos op2 ON pre2.id = op2.producto_estrategico_id
        INNER JOIN objetivos_estrategicos oe2 ON op2.objetivo_estrategico_id = oe2.id
        INNER JOIN desafios_objetivos do3 ON  oe2.id = do3.objetivo_estrategico_id
        INNER JOIN desafios_estrategicos de2 ON do3.desafio_estrategico_id = de2.id
        INNER JOIN planificaciones pl2 ON de2.planificacion_id = pl2.id
        INNER JOIN periodos_procesos pp2 ON pl2.periodo_proceso_id = pp2.id
     	WHERE t2.estado = 1 AND la.estado = 1 AND pre2.estado = 1';
     	
     	if($bandera == 0){
     		$sql = $sql.' AND t2.responsable_id='.$id_usuario;
     	}else{
     		$sql = $sql.' AND t2.id='.$bandera;
     	}
     	
    	if(isset(Yii::app()->session['idPeriodo'])){
			$sql =  $sql.' AND pp2.id = '.Yii::app()->session['idPeriodo'];
		}
    	//$sql = $sql.' ORDER BY id_pro_estrategico';
		$resultado=Yii::app()->db->createCommand($sql)->queryAll();
		return $resultado;
    
        
    }
    	public function listadoFiltrado() {
		
	    	$criteria = new CDbCriteria;
			$criteria->select='t.*, sp.centro_costo_id, pes.nombre as producto_especifico_n, 
				case when t.asociacion_id = 1 or t.asociacion_id = 2 then "MG" when t.asociacion_id = 3 then "PMG" else " " end as mg,
				sp.nombre as subproducto_n, pe.nombre as producto_estrategico_n, cargos.nombre as cargo, divisiones.nombre as division_n,
				claambito.nombre as ambito_n, divisiones.id as division_id,
				(SELECT ponderacion FROM indicadores_instrumentos WHERE id_indicador= t.id AND id_instrumento=4 AND estado=1) as ponderaciont,
				(SELECT ponderacion FROM indicadores_instrumentos WHERE id_indicador= t.id AND id_instrumento=2 AND estado=1) as ponderacioncdc,
				(SELECT ponderacion FROM indicadores_instrumentos WHERE id_indicador= t.id AND id_instrumento=5 AND estado=1) as ponderacionfh,
				(SELECT ponderacion FROM indicadores_instrumentos WHERE id_indicador= t.id AND id_instrumento=1 AND estado=1) as ponderacionpmg,
				(SELECT ponderacion FROM indicadores_instrumentos WHERE id_indicador= t.id AND id_instrumento=3 AND estado=1) as ponderacionmg';
			$criteria->join=' 	INNER JOIN users  on t.responsable_id= users.id
								INNER JOIN cargos on users.cargo_id = cargos.id
								LEFT JOIN clasificaciones_ambitos AS claambito on t.clasificacion_ambito_id = claambito.id and claambito.estado=1
								LEFT JOIN lineas_accion la on t.id=la.id_indicador and la.estado=1      
								LEFT JOIN productos_especificos AS pes on t.producto_especifico_id=pes.id and pes.estado=1							
	                			LEFT JOIN subproductos AS sp on pes.subproducto_id=sp.id and sp.estado=1                			
				                INNER JOIN productos_estrategicos AS pe on sp.producto_estrategico_id=pe.id or la.producto_estrategico_id=pe.id
				                INNER JOIN divisiones  ON  pe.division_id = divisiones.id
				                INNER JOIN objetivos_productos AS op ON pe.id = op.producto_estrategico_id
				                INNER JOIN objetivos_estrategicos AS oe ON op.objetivo_estrategico_id = oe.id
				                INNER JOIN desafios_objetivos AS do2 ON  oe.id = do2.objetivo_estrategico_id
				                INNER JOIN desafios_estrategicos AS de ON do2.desafio_estrategico_id = de.id
				                INNER JOIN planificaciones AS pl ON de.planificacion_id = pl.id 
				                INNER JOIN periodos_procesos AS pp ON pl.periodo_proceso_id = pp.id';
	
	        $criteria->distinct =true;
	        
	        $criteria->condition = 't.estado = 1 AND pp.id = '.Yii::app()->session['idPeriodo'];
	        
	        if(isset($_GET['Indicadores']['division_id'])){    
	        	$criteria->addCondition('divisiones.id= :division_id');
				$criteria->params[':division_id'] = $_GET['Indicadores']['division_id']; // bind your parameter
	        }else{
	        	$criteria->addCondition('divisiones.id= :division_id');
				$criteria->params[':division_id'] = 0; // bind your parameter	
	        }
			
	        return new CActiveDataProvider(get_class($this), array(
				'criteria' => $criteria,
				'sort'=>array('defaultOrder'=>'sp.centro_costo_id ASC'),
	            'pagination' => array('pageSize' => 999,)
			));
		 
		
	}
    
    
    ///////////////////////////////////////////////
    public function unIndicadorUusario($id){
    	
         
        $criteria = new CDbCriteria;
         		$criteria->with=array(
		    'tipoFormula',
			'productoEspecifico',
			'productoEspecifico.subproducto',
			'productoEspecifico.subproducto.productoEstrategico',  
			'frecuenciaControl',
         	'responsable',
         	'productoEspecifico.subproducto.productoEstrategico.objetivosEstrategicoses.desafiosEstrategicoses.planificacion.periodoProceso'
		);
         
        $criteria->select = 't.*, productoEstrategico.nombre AS p_estra_nom, t.nombre AS nom_indicador, subproducto.nombre AS subp_nombre,  productoEspecifico.nombre AS pro_especifico_nom';
  		
        $criteria->condition='t.estado = 1 AND productoEspecifico.estado = 1
         AND subproducto.estado = 1 AND productoEstrategico.estado = 1';
        
      	if(isset(Yii::app()->session['idPeriodo'])){

			 $criteria->addCondition('periodoProceso.id = '.Yii::app()->session['idPeriodo']);
        }
        
        $criteria->compare('t.id', $id);
        $indicadores = Indicadores::model()->findAll($criteria);
        
        return $indicadores;
        
    }
    
    
    public static function indicadoresPorProductoEspecifico($id){
    	
    	$criteria = new CDbCriteria;
        $criteria->select = 't.*';
        $criteria->join ='INNER JOIN productos_especificos p ON t.producto_especifico_id = p.id';
        $criteria->addCondition('p.estado = 1 AND t.estado = 1 AND t.producto_especifico_id ='.$id);
        
        $indicadores = Indicadores::model()->findAll($criteria);
        
        return $indicadores;
    	
    }
    
    public function buscquedaAtributosModelos(){
    	$banderaI = 0;
    	$banderaI2 = 0;
    	$sql='SELECT pre.id as estrategico,
		d.nombre AS divisionNombre, 
		cc.nombre AS centroCostoNombre, 
		ca.nombre AS cargoNombre, 
		tp.nombre AS tipoProductoEstrategico,
		pre.nombre AS productoEstrategicoNombre, 
		sb.nombre AS subproductoNombre, 
		pe.nombre AS productoEspecificoNombre, 
		t.nombre, 
		t.responsable_id, 
		t.id AS id  
		FROM indicadores t 
		INNER JOIN productos_especificos pe ON t.producto_especifico_id = pe.id 
		INNER JOIN subproductos sb ON pe.subproducto_id = sb.id 
		INNER JOIN productos_estrategicos pre ON sb.producto_estrategico_id = pre.id 
		INNER JOIN divisiones d ON pre.division_id = d.id 
		INNER JOIN centros_costos cc ON cc.division_id = d.id AND cc.id = sb.centro_costo_id
		INNER JOIN tipos_productos tp ON tp.id = pre.tipo_producto_id 
		INNER JOIN objetivos_productos op ON pre.id = op.producto_estrategico_id 
		INNER JOIN objetivos_estrategicos oe ON op.objetivo_estrategico_id = oe.id 
		INNER JOIN desafios_objetivos do2 ON oe.id = do2.objetivo_estrategico_id 
		INNER JOIN desafios_estrategicos de ON do2.desafio_estrategico_id = de.id 
		INNER JOIN planificaciones pl ON de.planificacion_id = pl.id 
		INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id 
		INNER JOIN users u ON u.id = t.responsable_id 
		INNER JOIN cargos ca ON ca.id = u.cargo_id';
    	//filtrando si vienen instrumentos
      	if(isset($_GET['Instrumentos'])&&!empty($_GET['Instrumentos'])){//si vienen instrumentos		    	
     		
      			if(isset($_GET['Instrumentos']['nombre'])&&!empty($_GET['Instrumentos']['nombre'])){
      				$instrumentos = $_GET['Instrumentos']['nombre'];
      				$cadena1='';
      				$cadena2='';
      				$b=0;
      				$banderaA=0;
      				for($i=0; $i<count($instrumentos); $i++){
      					
      					if($instrumentos[$i]!= 1 && $instrumentos[$i]!=3){//normales
      						if($b==0){
      							$cadena1 = $cadena1.$instrumentos[$i];
      							$b=1;
      						}else{
      							$cadena1 = $cadena1.', '.$instrumentos[$i];
      						}
      						
      					}else{//pmg o mg
      						
      						if($banderaA==0){
      							
      							if($instrumentos[$i]==1){//pmg
      								$cadena2 = $cadena2.'3';
      							}
      							if($instrumentos[$i]==3){//mg
      								$cadena2 = $cadena2.'1, 2';
      							}
      							$banderaA=1;
      						}//fin if
      						else{
      							
      							if($instrumentos[$i]==1){//pmg
      								$cadena2 = $cadena2.', 3';
      							}
      							if($instrumentos[$i]==3){//mg
      								$cadena2 = $cadena2.', 1, 2';
      							}
      							
      						}//fin else
      						
      					}
      					
      				}//fin for
      				
      				if($cadena1!=''){
      					$sql = $sql.' INNER JOIN indicadores_instrumentos ii on t.id=ii.id_indicador';
      					$sql=$sql.' WHERE ii.estado=1 AND ii.id_instrumento IN ('.$cadena1.')';
      					$banderaI=1;
      				}
      				if($cadena2!=''){
      					
      					if($banderaI==1){
      						$sql=$sql.' AND t.asociacion_id IN('.$cadena2.')';
      					}else{
      						$sql=$sql.' WHERE t.asociacion_id IN('.$cadena2.')';
      					}
      					$banderaI=1;
      				}
      		
      				
      			}
      		
        }//fin if principal
		//fin filtrando por instrumentos
		if($banderaI==0){
     		$sql = $sql.' WHERE t.estado = 1 AND   pe.estado = 1 AND sb.estado = 1 AND pre.estado = 1 AND  tp.estado = 1';
		}else{
			$sql = $sql.' AND t.estado = 1 AND   pe.estado = 1 AND sb.estado = 1 AND pre.estado = 1 AND  tp.estado = 1';
		}
     	if($this->productoEspecificoNombre!=0){
    			$sql = $sql.' AND pe.id = '.$this->productoEspecificoNombre;
		}
		if($this->subproductoNombre !=0){
				$sql = $sql.' AND sb.id = '.$this->subproductoNombre;
		}
		if($this->productoEstrategicoNombre !=0){
				$sql = $sql.' AND pre.id = '.$this->productoEstrategicoNombre;
		}
		if($this->centroCostoNombre != 0){
				$sql = $sql.' AND cc.id = '.$this->centroCostoNombre;
		}
		if($this->divisionNombre !=0){
				$sql = $sql.' AND d.id = '.$this->divisionNombre;
		}
		if($this->tipoProductoEstrategico !=0){
				$sql = $sql.' AND tp.id = '.$this->tipoProductoEstrategico;
		}		 
		if($this->cargoNombre != 0){
				$sql = $sql.' AND ca.id = '.$this->cargoNombre;
		}		 
		if($this->responsableNombre != 0){
				$sql = $sql.' AND u.id = '.$this->responsableNombre;
		}
		if(isset(Yii::app()->session['idPeriodo'])){
			$sql =  $sql.' AND pp.id = '.Yii::app()->session['idPeriodo'];
		}
		$sql=$sql.' GROUP BY t.id';
     	$sql=$sql.' UNION SELECT pre2.id as estrategico,
		d2.nombre AS divisionNombre, 
		cc2.nombre AS centroCostoNombre,
		ca2.nombre AS cargoNombre,
		tp2.nombre AS tipoProductoEstrategico, 
		pre2.nombre AS productoEstrategicoNombre,
		" - " AS subproductoNombre, 
		la.nombre AS productoEspecificoNombre,
		t2.nombre, 
		t2.responsable_id, 
		t2.id AS id
		FROM indicadores t2
		INNER JOIN lineas_accion la ON la.id_indicador = t2.id
		INNER JOIN productos_estrategicos pre2 ON la.producto_estrategico_id = pre2.id
		INNER JOIN tipos_productos tp2 ON tp2.id = pre2.tipo_producto_id
		INNER JOIN divisiones d2 ON pre2.division_id = d2.id
		INNER JOIN centros_costos cc2 ON cc2.division_id = d2.id AND la.centro_costo_id = cc2.id
		INNER JOIN objetivos_productos op2 ON pre2.id = op2.producto_estrategico_id
		INNER JOIN objetivos_estrategicos oe2 ON op2.objetivo_estrategico_id = oe2.id
		INNER JOIN desafios_objetivos do3 ON oe2.id = do3.objetivo_estrategico_id
		INNER JOIN desafios_estrategicos de2 ON do3.desafio_estrategico_id = de2.id
		INNER JOIN planificaciones pl2 ON de2.planificacion_id = pl2.id
		INNER JOIN periodos_procesos pp2 ON pl2.periodo_proceso_id = pp2.id
		INNER JOIN users u2 ON u2.id = t2.responsable_id
		INNER JOIN cargos ca2 ON ca2.id = u2.cargo_id';
     	//filtrando si vienen instrumentos
      if(isset($_GET['Instrumentos'])&&!empty($_GET['Instrumentos'])){//si vienen instrumentos		    	
     		
      			if(isset($_GET['Instrumentos']['nombre'])&&!empty($_GET['Instrumentos']['nombre'])){
      				$instrumentos = $_GET['Instrumentos']['nombre'];
      				$cadena1='';
      				$cadena2='';
      				$b1=0;
      				$banderaA2=0;
      				for($i=0; $i<count($instrumentos); $i++){
      					
      					if($instrumentos[$i]!= 1 && $instrumentos[$i]!=3){//normales
      						if($b1==0){
      							$cadena1 = $cadena1.$instrumentos[$i];
      							$b1=1;
      						}else{
      							$cadena1 = $cadena1.', '.$instrumentos[$i];
      						}
      						
      					}else{//pmg o mg
      						
      						if($banderaA2==0){
      							
      							if($instrumentos[$i]==1){//pmg
      								$cadena2 = $cadena2.'3';
      							}
      							if($instrumentos[$i]==3){//mg
      								$cadena2 = $cadena2.'1, 2';
      							}
      							$banderaA2=1;
      						}//fin if
      						else{
      							
      							if($instrumentos[$i]==1){//pmg
      								$cadena2 = $cadena2.', 3';
      							}
      							if($instrumentos[$i]==3){//mg
      								$cadena2 = $cadena2.', 1, 2';
      							}
      							
      						}//fin else
      						
      					}
      					
      				}//fin for
      				
      				if($cadena1!=''){
      					$sql = $sql.' INNER JOIN indicadores_instrumentos ii2 on t2.id=ii2.id_indicador';
      					$sql=$sql.' WHERE ii2.estado=1 AND ii2.id_instrumento IN ('.$cadena1.')';
      					$banderaI2=1;
      				}
      				if($cadena2!=''){
      					
      					if($banderaI2==1){
      						$sql=$sql.' AND t2.asociacion_id IN('.$cadena2.')';
      					}else{
      						$sql=$sql.' WHERE t2.asociacion_id IN('.$cadena2.')';
      					}
      					$banderaI2=1;
      				}
      		
      				
      			}
      		
        }//fin if principal
		//fin filtrando por instrumentos
		if($banderaI2==0){
     		$sql=$sql.' WHERE t2.estado = 1 AND pre2.estado = 1 AND  tp2.estado = 1';
		}else{
			$sql=$sql.' AND t2.estado = 1 AND pre2.estado = 1 AND  tp2.estado = 1';
		}

		if($this->productoEstrategicoNombre !=0){
				$sql = $sql.' AND pre2.id = '.$this->productoEstrategicoNombre;
		}
		if($this->centroCostoNombre != 0){
				$sql = $sql.' AND cc2.id = '.$this->centroCostoNombre;
		}
		if($this->divisionNombre !=0){
				$sql = $sql.' AND d2.id = '.$this->divisionNombre;
		}
		if($this->tipoProductoEstrategico !=0){
				$sql = $sql.' AND tp2.id = '.$this->tipoProductoEstrategico;
		}		 
		if($this->cargoNombre != 0){
				$sql = $sql.' AND ca2.id = '.$this->cargoNombre;
		}		 
		if($this->responsableNombre != 0){
				$sql = $sql.' AND u2.id = '.$this->responsableNombre;
		}    	
    	if(isset(Yii::app()->session['idPeriodo'])){
			$sql =  $sql.' AND pp2.id = '.Yii::app()->session['idPeriodo'];
		}
    	$sql = $sql.' GROUP BY t2.id';
		$resultado=Yii::app()->db->createCommand($sql)->queryAll();
		
		return $resultado;
    	
    }
  /*public function buscquedaAtributosModelos() {

        $criteria = new CDbCriteria;
        $criteria->with=array(
		 'productoEspecifico',
		 'productoEspecifico.subproducto', 
		 'productoEspecifico.subproducto.productoEstrategico', 
		 'productoEspecifico.subproducto.centroCosto', 
		 'productoEspecifico.subproducto.centroCosto.division',
		 'productoEspecifico.subproducto.productoEstrategico.tipoProducto', 'user.cargo',
		 'indicadoresInstrumentoses.idInstrumento', 'user', 'hitosIndicadores',
		 'productoEspecifico.subproducto.productoEstrategico.objetivosEstrategicoses.desafiosEstrategicoses.planificacion.periodoProceso'
		);
		

    	if(isset(Yii::app()->session['idPeriodo'])){
		
    		 $criteria->condition = 'periodoProceso.id = '.Yii::app()->session['idPeriodo'];

    	
        }
  		
  		if(isset($_GET['Instrumentos'])&&!empty($_GET['Instrumentos'])){//si vienen instrumentos		    	

        	 if(isset($_GET['Instrumentos']['nombre'])&&!empty($_GET['Instrumentos']['nombre'])){
        		$instrumentos = $_GET['Instrumentos']['nombre'];
        		$instrumentos=implode(",", $instrumentos);
        		$criteria->join='INNER JOIN indicadores_instrumentos ii on t.id=ii.id_indicador';
       
        		 	$criteria->addCondition('ii.id_instrumento IN ('.$instrumentos.')');
        		
        		
        	 }
        
        }
        
        		if($this->productoEspecificoNombre!=0){
				 $criteria->compare('productoEspecifico.id', $this->productoEspecificoNombre);
				 }
				 if($this->subproductoNombre !=0){
					 $criteria->compare('subproducto.id', $this->subproductoNombre);
				 }
				 if($this->productoEstrategicoNombre !=0){
					 $criteria->compare('productoEstrategico.id', $this->productoEstrategicoNombre);
				 }
				 if($this->centroCostoNombre != 0){
					 $criteria->compare('centroCosto.id', $this->centroCostoNombre);
				 }
				 if($this->divisionNombre !=0){
				 $criteria->compare('division.id', $this->divisionNombre);
				 }
				 if($this->tipoProductoEstrategico !=0){
				 	$criteria->compare('tipoProducto.id', $this->tipoProductoEstrategico);
				 }
				 
				 if($this->cargoNombre != 0){
				 $criteria->compare('cargo.id', $this->cargoNombre);
				 }
				 
				 if($this->responsableNombre != 0){
				 $criteria->compare('user.id', $this->responsableNombre);
				 }
				
        
    		 $indicadores = Indicadores::model()->findAll($criteria);
	     	 return $indicadores;
      

    }*/
    
    public static function indicadorUnUsuarioFueraEstado($idIndicador){
         
    	
        $criteria = new CDbCriteria;
        $criteria->select = 'sb.nombre AS subp_nombre, pes.nombre AS pro_especifico_nom, t.nombre, t.id AS id_indicador, tf.id AS id_formula, pe.nombre AS p_estra_nom';
        $criteria->join ='INNER JOIN productos_especificos pes ON t.producto_especifico_id = pes.id
        INNER JOIN subproductos sb ON sb.id = pes.subproducto_id INNER JOIN productos_estrategicos pe
        ON pe.id = sb.producto_estrategico_id LEFT JOIN tipos_formulas tf ON tf.id = t.tipo_formula_id';
        $criteria->condition ='t.id ='.$idIndicador;
        
        $indicadores = Indicadores::model()->findAll($criteria);
        
        return $indicadores;
        
    }

  public static function obtenerDatosExcel($div, $centro, $gestor, $tipo, $estrategico, $sub, $especifico, $indicador, $estado) {
        $criteria = new CDbCriteria;

		 $criteria->with = array('productoEspecifico',
		 'productoEspecifico.subproducto', 
		 'productoEspecifico.subproducto.productoEstrategico', 
		 'productoEspecifico.subproducto.centroCosto', 
		 'productoEspecifico.subproducto.centroCosto.division',
		  'productoEspecifico.subproducto.productoEstrategico.tipoProducto', 'user.cargo',
		  'indicadoresInstrumentoses', 'user', 'hitosIndicadores');
		 
		 if($especifico!=0){
		 $criteria->compare('productoEspecifico.id', $especifico);
		 }
		 if($sub !=0){
			 $criteria->compare('subproducto.id', $sub);
		 }
		 if($estrategico !=0){
			 $criteria->compare('productoEstrategico.id', $estrategico);
		 }
		 if($centro != 0){
			 $criteria->compare('centroCosto.id', $centro);
		 }
		 if($div !=0){
		 $criteria->compare('division.id', $div);
		 }
		 if($estrategico !=0){
		 	$criteria->compare('tipoProducto.id', $tipo);
		 }
		 
		 if($gestor != 0){
		 $criteria->compare('user.id', $gestor);
		 }
	     if($indicador != 0){
	        $criteria->compare('t.id', $indicador);
	     }

	     $criteria->compare('t.estado', $estado);
	 

    /*    $criteria->compare('asociacion_id', $this->asociacion_id);
        $criteria->compare('responsable_id', $this->responsable_id);
        $criteria->compare('frecuencia_control_id', $this->frecuencia_control_id);
        $criteria->compare('unidad_id', $this->unidad_id);
        $criteria->compare('clasificacion_tipo_id', $this->clasificacion_tipo_id);
        $criteria->compare('producto_especifico_id', $this->producto_especifico_id);
        $criteria->compare('tipo_formula_id', $this->tipo_formula_id);
        $criteria->compare('clasificacion_dimension_id', $this->clasificacion_dimension_id);
        $criteria->compare('clasificacion_ambito_id', $this->clasificacion_ambito_id);
        $criteria->compare('nombre', $this->nombre, true);
        $criteria->compare('descripcion', $this->descripcion, true);
        $criteria->compare('ascendente', $this->ascendente);
        $criteria->compare('conceptoa', $this->conceptoa, true);
        $criteria->compare('conceptob', $this->conceptob, true);
        $criteria->compare('conceptoc', $this->conceptoc, true);
        $criteria->compare('formula', $this->formula, true);
        $criteria->compare('medio_verificacion', $this->medio_verificacion, true);
        $criteria->compare('notas', $this->notas, true);
        $criteria->compare('efectivot3', $this->efectivot3, true);
        $criteria->compare('efectivot2', $this->efectivot2, true);
        $criteria->compare('efectivot1', $this->efectivot1, true);
        $criteria->compare('meta_anual', $this->meta_anual, true);
        $criteria->compare('meta_parcial', $this->meta_parcial, true);
        $criteria->compare('supuestos', $this->supuestos, true);
        $criteria->compare('desagregado', $this->desagregado);
        $criteria->compare('gestion_territorial', $this->gestion_territorial);
        $criteria->compare('t.estado', $this->estado);
        
        if(isset(Yii::app()->session['idPeriodoSelecionado'])){
            $criteria->join=' inner join productos_especificos pes on t.producto_especifico_id=pes.id
                INNER JOIN subproductos sp on pes.subproducto_id=sp.id
                INNER JOIN productos_estrategicos pe on sp.producto_estrategico_id=pe.id
                INNER JOIN objetivos_productos op ON pe.id = op.producto_estrategico_id
                INNER JOIN objetivos_estrategicos oe ON op.objetivo_estrategico_id = oe.id
                INNER JOIN desafios_objetivos do2 ON  oe.id = do2.objetivo_estrategico_id
                INNER JOIN desafios_estrategicos de ON do2.desafio_estrategico_id = de.id
                INNER JOIN planificaciones pl ON de.planificacion_id = pl.id 
                INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id';
            $criteria->distinct =true;
            $criteria->select='t.*';
         //   $criteria->condition='pp.descripcion = '.Yii::app()->session['idPeriodoSelecionado'];
        }else{
         //   $criteria->condition='t.id=0';
        }
        */
        
        $indicadores = Indicadores::model()->findAll($criteria);
        
       return $indicadores;
    }
 
    
    public function buscarProductoEstrategicoIndicadores($tipo, $bandera){

    	
    	$sql='SELECT fc.nombre AS  frecuenciaControl, t.ascendente AS ascendente, pre.id AS id_pro_estrategico,
    	pre.nombre AS producto_estrategico_n, t.*, fc.plazo_maximo AS plazo_maximo, sb.nombre AS subp_nombre,
    	pe.nombre AS pro_especifico_nom, t.id AS id
    	FROM indicadores t
     	INNER JOIN productos_especificos pe ON t.producto_especifico_id = pe.id
     	INNER JOIN subproductos sb ON pe.subproducto_id = sb.id 
     	INNER JOIN productos_estrategicos pre ON sb.producto_estrategico_id = pre.id
     	INNER JOIN frecuencias_controles fc ON t.frecuencia_control_id = fc.id
     	INNER JOIN tipos_productos tp ON tp.id = pre.tipo_producto_id
     	INNER JOIN objetivos_productos op ON pre.id = op.producto_estrategico_id
        INNER JOIN objetivos_estrategicos oe ON op.objetivo_estrategico_id = oe.id
        INNER JOIN desafios_objetivos do2 ON  oe.id = do2.objetivo_estrategico_id
        INNER JOIN desafios_estrategicos de ON do2.desafio_estrategico_id = de.id
        INNER JOIN planificaciones pl ON de.planificacion_id = pl.id
        INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id
     	WHERE t.estado = 1 AND fc.estado=1 AND pe.estado = 1 AND sb.estado = 1 AND pre.estado = 1 AND  tp.estado = 1';
    	if($bandera==0){
    		$sql = $sql.' AND tp.id = '.$tipo;
    	}else{
    		$sql = $sql.' AND pre.id='.$tipo;
    	}
		if(isset(Yii::app()->session['idPeriodo'])){
			$sql =  $sql.' AND pp.id = '.Yii::app()->session['idPeriodo'];
		}
	
     	$sql=$sql.' UNION SELECT fc2.nombre AS frecuenciaControl,t2.ascendente AS ascendente,
     	pre2.id AS id_pro_estrategico, pre2.nombre AS producto_estrategico_n,
     	t2.*,fc2.plazo_maximo AS plazo_maximo, la.nombre AS  subp_nombre, la.nombre AS pro_especifico_nom
     	, t2.id AS id
     	FROM indicadores t2
     	INNER JOIN lineas_accion la ON la.id_indicador = t2.id
     	INNER JOIN productos_estrategicos pre2 ON la.producto_estrategico_id = pre2.id
     	INNER JOIN frecuencias_controles fc2 ON t2.frecuencia_control_id = fc2.id
     	INNER JOIN tipos_productos tp2 ON tp2.id = pre2.tipo_producto_id
     	INNER JOIN objetivos_productos op2 ON pre2.id = op2.producto_estrategico_id
        INNER JOIN objetivos_estrategicos oe2 ON op2.objetivo_estrategico_id = oe2.id
        INNER JOIN desafios_objetivos do3 ON  oe2.id = do3.objetivo_estrategico_id
        INNER JOIN desafios_estrategicos de2 ON do3.desafio_estrategico_id = de2.id
        INNER JOIN planificaciones pl2 ON de2.planificacion_id = pl2.id
        INNER JOIN periodos_procesos pp2 ON pl2.periodo_proceso_id = pp2.id
     	WHERE t2.estado = 1 AND fc2.estado=1 AND pre2.estado = 1 AND  tp2.estado = 1';
     	if($bandera==0){
     		$sql = $sql.' AND tp2.id = '.$tipo;
     	}else{
     		$sql = $sql.' AND pre2.id='.$tipo;
     	}
     	
    	if(isset(Yii::app()->session['idPeriodo'])){
			$sql =  $sql.' AND pp2.id = '.Yii::app()->session['idPeriodo'];
		}
    	$sql = $sql.' ORDER BY id_pro_estrategico';
		$resultado=Yii::app()->db->createCommand($sql)->queryAll();
		
		return $resultado;
    }
    


 public  function indicadoresDivision($id){

 	    $sql='SELECT fc.plazo_maximo AS plazo_maximo, fc.nombre AS frecuenciaControl, d.nombre AS division, sb.nombre AS subp_nombre, d.id AS division_id, pe.nombre AS pro_especifico_nom, t.*
 	    FROM indicadores t
     	INNER JOIN productos_especificos pe ON t.producto_especifico_id = pe.id
     	INNER JOIN subproductos sb ON pe.subproducto_id = sb.id 
     	INNER JOIN productos_estrategicos pre ON sb.producto_estrategico_id = pre.id
     	INNER JOIN divisiones d ON d.id=pre.division_id
     	INNER JOIN frecuencias_controles fc ON t.frecuencia_control_id = fc.id
     	INNER JOIN tipos_formulas tf ON tf.id=t.tipo_formula_id
     	INNER JOIN objetivos_productos op ON pre.id = op.producto_estrategico_id
        INNER JOIN objetivos_estrategicos oe ON op.objetivo_estrategico_id = oe.id
        INNER JOIN desafios_objetivos do2 ON  oe.id = do2.objetivo_estrategico_id
        INNER JOIN desafios_estrategicos de ON do2.desafio_estrategico_id = de.id
        INNER JOIN planificaciones pl ON de.planificacion_id = pl.id
        INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id
     	WHERE t.estado = 1 AND pe.estado = 1 AND sb.estado = 1 AND pre.estado = 1 AND d.estado = 1 AND tf.estado = 1';

		if(isset(Yii::app()->session['idPeriodo'])){
			$sql =  $sql.' AND pp.id = '.Yii::app()->session['idPeriodo'];
		}
		if($id!=0){
			$sql = $sql.' AND d.id='.$id;
		}
     	$sql=$sql.' UNION SELECT fc2.plazo_maximo AS plazo_maximo, fc2.nombre AS frecuenciaControl, d2.nombre AS division, la.nombre AS subp_nombre, d2.id AS division_id, la.nombre AS pro_especifico_nom, t2.* 
     	FROM indicadores t2
     	INNER JOIN lineas_accion la ON la.id_indicador = t2.id
     	INNER JOIN productos_estrategicos pre2 ON la.producto_estrategico_id = pre2.id
     	INNER JOIN divisiones d2 ON d2.id = pre2.division_id
     	INNER JOIN frecuencias_controles fc2 ON t2.frecuencia_control_id = fc2.id
     	INNER JOIN tipos_formulas tf2 ON tf2.id = t2.tipo_formula_id
     	INNER JOIN objetivos_productos op2 ON pre2.id = op2.producto_estrategico_id
        INNER JOIN objetivos_estrategicos oe2 ON op2.objetivo_estrategico_id = oe2.id
        INNER JOIN desafios_objetivos do3 ON  oe2.id = do3.objetivo_estrategico_id
        INNER JOIN desafios_estrategicos de2 ON do3.desafio_estrategico_id = de2.id
        INNER JOIN planificaciones pl2 ON de2.planificacion_id = pl2.id
        INNER JOIN periodos_procesos pp2 ON pl2.periodo_proceso_id = pp2.id
     	WHERE t2.estado = 1 AND pre2.estado = 1 AND d2.estado = 1 AND tf2.estado = 1';
     	
    	if(isset(Yii::app()->session['idPeriodo'])){
			$sql =  $sql.' AND pp2.id = '.Yii::app()->session['idPeriodo'];
		}
		
		if($id !=0){
			$sql = $sql.' AND d2.id='.$id;
		}
		
    	$sql = $sql.' ORDER BY division_id';
		$resultado=Yii::app()->db->createCommand($sql)->queryAll();
		return $resultado;
      
    }
    
 
	public function indicadoresInstrumento(){
        
           
        $criteria = new CDbCriteria;
        $criteria->with=array(
		    'tipoFormula',
			'productoEspecifico',
			'productoEspecifico.subproducto',
			'productoEspecifico.subproducto.productoEstrategico',  
			'frecuenciaControl',
        	'indicadoresInstrumentoses',
        	'indicadoresInstrumentoses.idInstrumento',
		);
		      
        $criteria->select = 'idInstrumento.nombre AS instrumentoNombre, idInstrumento.id AS id_instrumentos ,
        tf.*, subproducto.nombre AS subp_nombre, productoEspecifico.nombre AS pro_especifico_nom';
        $criteria->addCondition('t.estado = 1 AND productoEspecifico.estado = 1 AND subproducto.estado = 1 AND productoEstrategico.estado = 1 AND
        tipoFormula.estado = 1 AND indicadoresInstrumentoses.estado = 1 AND idInstrumento.estado = 1'); 
        $criteria->order='idInstrumento.id';
       
        $indicadores = Indicadores::model()->findAll($criteria);
        
        return $indicadores;
        
        
    }
    
    
    public function obtenerInstrumentosPorColumna($data, $row){
    	
    	$resultado = '';
	    $cadena2='';
    	$cadena='';
    	$sql='';
    	if(isset($_GET['Instrumentos'])&&!empty($_GET['Instrumentos'])){//si vienen instrumentos
    	
    		if(isset($_GET['Instrumentos']['nombre'])&&!empty($_GET['Instrumentos']['nombre'])){
    			$instrumentos = $_GET['Instrumentos']['nombre'];
    		
    			$b1=0;
    			$b=0;
    			for($i=0; $i<count($instrumentos);$i++){
    				
    				if($instrumentos[$i]!= 1 && $instrumentos[$i]!= 3){
	    					if($b==0){
	    						$cadena = $cadena.$instrumentos[$i];
	    						$b=1;
	    					}else{
	    						$cadena = $cadena.', '.$instrumentos[$i];
	    					}
    				}else{
    				
		    				if($b1==0){
			    				if($instrumentos[$i]== 1){//pmg
			    					$cadena2 = $cadena2.'3';
			    					
			    				}
			    				if($instrumentos[$i]== 3){//mg
			    					$cadena2 = $cadena2.'1, 2';
			    				}
			    				$b1=1;
		    				}else{
		    					if($instrumentos[$i]== 1){//pmg
		    						$cadena2 = $cadena2.', 3';
		    					}
		    					if($instrumentos[$i]== 3){//mg
		    						$cadena2 = $cadena2.',1, 2 ';
		    					}
		    					
		    				}
    				}//fin else principal
    			}//fin for
		
    		}//fin if
    	}//fin if get
    	
    	if($cadena2==''&&$cadena==''){//si no hay filtro
    		
    		$sql =$sql.' SELECT t.id, i.nombre AS instName FROM indicadores t INNER JOIN
    			indicadores_instrumentos ii ON t.id = ii.id_indicador
    			INNER JOIN instrumentos i ON ii.id_instrumento = i.id
    			WHERE ii.estado = 1 AND i.estado = 1 AND ';
    			
    		if($row != -1){
    			$sql = $sql.'t.id = '.$data['id'];
    		}else{
    			$sql = $sql.'t.id = '.$data;
    		}
    		
    		$sql=$sql.' UNION  SELECT t2.id, case when t2.asociacion_id = 1 or t2.asociacion_id = 2 then "MG" when t2.asociacion_id = 3 then "PMG" else " " end AS instName FROM indicadores t2
	    			WHERE t2.estado = 1 AND ';
    		if($row!=-1){
    			$sql = $sql.' t2.id = '.$data['id'];
    		}else{
    			$sql = $sql.' t2.id = '.$data;
    		}
    		
    	}
    	
    	if($cadena!=''&&$cadena2!=''){//si hay dos filtros
    		
    		$sql =$sql.' SELECT t.id, i.nombre AS instName FROM indicadores t INNER JOIN
    			indicadores_instrumentos ii ON t.id = ii.id_indicador
    			INNER JOIN instrumentos i ON ii.id_instrumento = i.id
    			WHERE ii.estado = 1 AND i.estado = 1 AND ';
    		 
    		if($row != -1){
    			$sql = $sql.'t.id = '.$data['id'];
    		}else{
    			$sql = $sql.'t.id = '.$data;
    		}
    		$sql = $sql.' AND ii.id_instrumento IN ('.$cadena.')';
    		
    		$sql=$sql.' UNION  SELECT t2.id, case when t2.asociacion_id = 1 or t2.asociacion_id = 2 then "MG" when t2.asociacion_id = 3 then "PMG" else " " end AS instName FROM indicadores t2
	    			WHERE t2.estado = 1 AND ';
    		if($row!=-1){
    			$sql = $sql.' t2.id = '.$data['id'];
    		}else{
    			$sql = $sql.' t2.id = '.$data;
    		}
    		$sql = $sql.' AND t2.asociacion_id IN ('.$cadena2.')';
    	}
    	
    	if($cadena!=''&&$cadena2==''){//fintro instrumento
    		$sql =$sql.' SELECT t.id, i.nombre AS instName FROM indicadores t INNER JOIN
    			indicadores_instrumentos ii ON t.id = ii.id_indicador
    			INNER JOIN instrumentos i ON ii.id_instrumento = i.id
    			WHERE ii.estado = 1 AND i.estado = 1 AND ';
    		 
    		if($row != -1){
    			$sql = $sql.'t.id = '.$data['id'];
    		}else{
    			$sql = $sql.'t.id = '.$data;
    		}
    		$sql = $sql.' AND ii.id_instrumento IN ('.$cadena.')';
    		
    		$sql=$sql.' UNION  SELECT t2.id, " " AS instName FROM indicadores t2
	    			WHERE t2.estado = 1 AND ';
    		if($row!=-1){
    			$sql = $sql.' t2.id = '.$data['id'];
    		}else{
    			$sql = $sql.' t2.id = '.$data;
    		}
    		
    	}
    	
    	if($cadena==''&&$cadena2!=''){//fintro asociacion
    		
    		$sql =$sql.' SELECT t.id, " " AS instName FROM indicadores t INNER JOIN
    			indicadores_instrumentos ii ON t.id = ii.id_indicador
    			INNER JOIN instrumentos i ON ii.id_instrumento = i.id
    			WHERE ii.estado = 1 AND i.estado = 1 AND ';
    		 
    		if($row != -1){
    			$sql = $sql.'t.id = '.$data['id'];
    		}else{
    			$sql = $sql.'t.id = '.$data;
    		}
    		
    		
    		$sql=$sql.' UNION  SELECT t2.id, case when t2.asociacion_id = 1 or t2.asociacion_id = 2 then "MG" when t2.asociacion_id = 3 then "PMG" else " " end AS instName FROM indicadores t2
	    			WHERE t2.estado = 1 AND ';
    		if($row!=-1){
    			$sql = $sql.' t2.id = '.$data['id'];
    		}else{
    			$sql = $sql.' t2.id = '.$data;
    		}
    		$sql = $sql.' AND t2.asociacion_id IN ('.$cadena2.')';
    	}
   
    	if($sql==''){
    		$sql='SELECT t.id, i.nombre AS instName FROM indicadores t INNER JOIN
    			indicadores_instrumentos ii ON t.id = ii.id_indicador
    			INNER JOIN instrumentos i ON ii.id_instrumento = i.id
    			WHERE ii.estado = 1 AND i.estado = 1 AND i.id=1';
    	}
    	
    	$indicadores=Yii::app()->db->createCommand($sql)->queryAll();//devuel un array
        
    	$ban=0;
        for($i=0; $i <count($indicadores); $i++){
        	if($ban==0){
        		$resultado = $resultado.$indicadores[$i]['instName'];
        		$ban=1;
        	}else{
        		
        		if($indicadores[$i]['instName']!=" "){
        		$resultado = $resultado.', '.$indicadores[$i]['instName'];
        		}
        	}
        }
        
        
        return $resultado;
    }
    
    
    public static function datosUnIndicador($id){
    	
    	$criteria = new CDbCriteria;
        $criteria->with=array(
		    'tipoFormula',
			'frecuenciaControl',
        
		);
		      
        $criteria->select = 't.*';
        $criteria->compare('t.id', $id);
       
        $indicadores = Indicadores::model()->findAll($criteria);
        
        return $indicadores;
    }
    
    public function obtenerPonderacionPorColumna($data, $row){
    	
    	$resultado = '';
    	$criteria = new CDbCriteria;
        $criteria->select = 'ii.ponderacion';
        $criteria->join ='INNER JOIN indicadores_instrumentos ii  ON t.id = ii.id_indicador';
        if($row != -1){
       	 	$criteria->addCondition('ii.estado=1 AND ii.id_indicador='.$data['id']);
        }else{
        	$criteria->addCondition('ii.estado=1 AND ii.id_indicador='.$data);
        }
        
        if(isset($_GET['Instrumentos'])&&!empty($_GET['Instrumentos'])){//si vienen instrumentos		    	

        	 if(isset($_GET['Instrumentos']['nombre'])&&!empty($_GET['Instrumentos']['nombre'])){
        		  	$instrumentos = $_GET['Instrumentos']['nombre'];
        			$instrumentos=implode(",", $instrumentos);
        			$criteria->addCondition('ii.id_instrumento IN ('.$instrumentos.')');
        	 }
        }

        $ponderaciones = Indicadores::model()->findAll($criteria);
        
        if(!empty($ponderaciones)){
        	
        
        
        for($i=0; $i <count($ponderaciones); $i++){
        	
        	if($ponderaciones[$i]['ponderacion']==null){
        		$ponderaciones[$i]['ponderacion'] = 0;
        	}
        	if($i== (count($ponderaciones)-1)){
        		$resultado = $resultado.$ponderaciones[$i]['ponderacion'];
        	}else{
        		$resultado = $resultado.$ponderaciones[$i]['ponderacion'].',';
        	}
        }
        }else{
        	$resultado = 0;
        }
        
        return $resultado;
    }
    
    
    //Obtiene el porcentaje de un centro de costo para el controller de presupuestoCentrosCostos
    public function getCentroCostoPorcentaje(){
            $valor=ProductoEstrategicoCentroCosto::Model()->findBySql(            
                ($this->lineasAccions)?"SELECT t.porcentaje FROM producto_estrategico_centro_costo t WHERE t.centro_costo_id=".$this->lineasAccions[0]->centroCosto->id." AND t.producto_estrategico_id=".$this->lineasAccions[0]->productoEstrategico->id." LIMIT 1"
                    :
                    "SELECT t.porcentaje FROM producto_estrategico_centro_costo t WHERE t.centro_costo_id=".$this->productoEspecifico->subproducto->centroCosto->id." AND t.producto_estrategico_id=".$this->productoEspecifico->subproducto->productoEstrategico->id." LIMIT 1"
                    );
           if($valor){               
               return CHtml::tag("input", array("type"=>"hidden","value"=>($this->lineasAccions)?$this->lineasAccions[0]->centroCosto->id:$this->productoEspecifico->subproducto->centroCosto->id)).$valor->porcentaje."%";
           }           
           return CHtml::tag("input", array("type"=>"hidden","value"=>($this->lineasAccions)?$this->lineasAccions[0]->centroCosto->id:$this->productoEspecifico->subproducto->centroCosto->id))."0%";              
        }
        

     
     public function indicadoresCDC($id, $bandera){

		$sql='SELECT t.id as id, concat(ii.ponderacion, " %") AS ponderacion,
		pre.nombre AS productoEstrategico, t.descripcion,  concat(meta_anual, " ", u.nombre) AS meta_anual, meta_anual AS meta_anual2, t.medio_verificacion, t.notas,
		t.supuestos, t.formula FROM indicadores t 
		INNER JOIN indicadores_instrumentos ii ON t.id=ii.id_indicador
     	INNER JOIN productos_especificos pe ON t.producto_especifico_id = pe.id
     	INNER JOIN subproductos sb ON pe.subproducto_id = sb.id 
     	INNER JOIN productos_estrategicos pre ON sb.producto_estrategico_id = pre.id
     	INNER JOIN divisiones d ON pre.division_id = d.id 
     	INNER JOIN objetivos_productos op ON pre.id = op.producto_estrategico_id
        INNER JOIN objetivos_estrategicos oe ON op.objetivo_estrategico_id = oe.id
        INNER JOIN desafios_objetivos do2 ON  oe.id = do2.objetivo_estrategico_id
        INNER JOIN desafios_estrategicos de ON do2.desafio_estrategico_id = de.id
        INNER JOIN planificaciones pl ON de.planificacion_id = pl.id
        INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id
        INNER JOIN tipos_formulas tf ON t.tipo_formula_id = tf.id
        INNER JOIN unidades u ON tf.unidad_id = u.id
     	WHERE t.estado = 1 AND ii.id_instrumento = 2 AND ii.estado=1';

		if(isset(Yii::app()->session['idPeriodo'])){
			$sql = $sql.' AND pp.id='.Yii::app()->session['idPeriodo'];
		}
		if($id != 0){
			$sql =  $sql.' AND d.id='.$id;
		}
		
     	$sql=$sql.' UNION
     	SELECT t2.id as id, concat(ii2.ponderacion, " %") AS ponderacion, 
		pre2.nombre AS productoEstrategico, t2.descripcion, concat(meta_anual, " ", u2.nombre) AS meta_anual, meta_anual AS meta_anual2,t2.medio_verificacion, t2.notas,
		t2.supuestos, t2.formula FROM indicadores t2 INNER JOIN lineas_accion la ON t2.id = la.id_indicador
     	INNER JOIN productos_estrategicos pre2 ON pre2.id = la.producto_estrategico_id
     	INNER JOIN divisiones d2 ON pre2.division_id = d2.id 
     	INNER JOIN indicadores_instrumentos ii2 ON t2.id=ii2.id_indicador
     	INNER JOIN objetivos_productos op2 ON pre2.id = op2.producto_estrategico_id
        INNER JOIN objetivos_estrategicos oe2 ON op2.objetivo_estrategico_id = oe2.id
        INNER JOIN desafios_objetivos do3 ON  oe2.id = do3.objetivo_estrategico_id
        INNER JOIN desafios_estrategicos de2 ON do3.desafio_estrategico_id = de2.id
        INNER JOIN planificaciones pl2 ON de2.planificacion_id = pl2.id
        INNER JOIN periodos_procesos pp2 ON pl2.periodo_proceso_id = pp2.id
        INNER JOIN tipos_formulas tf2 ON t2.tipo_formula_id = tf2.id
        INNER JOIN unidades u2 ON tf2.unidad_id = u2.id
		WHERE t2.estado = 1 AND ii2.id_instrumento=2 AND ii2.estado=1';
     	
    	if(isset(Yii::app()->session['idPeriodo'])){
			$sql = $sql.' AND pp2.id='.Yii::app()->session['idPeriodo'];
		}
     	
     	if($id != 0){
     		$sql=$sql.' AND d2.id='.$id;
     	}
		
		$resultado=Yii::app()->db->createCommand($sql)->queryAll();
	
		$count = count($resultado);
	
		if($bandera != 0){
		
			$dataProvider = new CArrayDataProvider($resultado,
					array(
							'keyField' => 'id',
							'id' => 'data',
							'pagination'=>array(
									'pageSize'=>10,
							),
					)
						
			);
		}
		else{
			$dataProvider= $resultado;
		}
			
		
     return $dataProvider;	
     
     }
     
     
     public function columnaIndicadorCDC($data, $row){
     	
     	$sql='SELECT t.nombre, cd.nombre AS dimension, ca.nombre AS ambito, proe.gestion_territorial AS territorial, proe.desagregado_sexo AS dsexo 
     	FROM indicadores t INNER JOIN clasificaciones_dimensiones cd ON t.clasificacion_dimension_id = cd.id
     	INNER JOIN clasificaciones_ambitos ca ON t.clasificacion_ambito_id = ca.id
     	INNER JOIN productos_especificos pe ON t.producto_especifico_id = pe.id
     	INNER JOIN subproductos sb ON pe.subproducto_id = sb.id
     	INNER JOIN productos_estrategicos proe ON sb.producto_estrategico_id = proe.id
     	WHERE t.id='.$data['id'].' 
     	UNION
     	SELECT t2.nombre, cd2.nombre AS dimension, ca2.nombre AS ambito, proe2.gestion_territorial AS territorial, proe2.desagregado_sexo AS dsexo
     	FROM indicadores t2 INNER JOIN lineas_accion la ON la.id_indicador = t2.id
     	INNER JOIN productos_estrategicos proe2 ON la.producto_estrategico_id = proe2.id
     	INNER JOIN clasificaciones_dimensiones cd2 ON t2.clasificacion_dimension_id = cd2.id
     	INNER JOIN clasificaciones_ambitos ca2 ON t2.clasificacion_ambito_id = ca2.id WHERE t2.id ='.$data['id'];
     	
     	$indicadores=Yii::app()->db->createCommand($sql)->queryAll();
     	$indicador='';
     	
     	for($i=0; $i<count($indicadores);$i++){
     		
     		$aux='';
     		$aux2='';
     	 	if($indicadores[$i]['dsexo']==0){
     			$aux = 'NO';
     			
     		}else{
     			$aux = 'SI';
     		}
     		
     	 	if($indicadores[$i]['territorial']==0){
     			$aux2 = 'NO';
     			
     		}else{
     			$aux2 = 'SI';
     		}
     		$indicador='<u><i><b>'.'Dimensión '.$indicadores[$i]['dimension'].'</b></i></u><br /><u><i><b>'.'Ámbito '.$indicadores[$i]['ambito'].'</b></i></u><br/><br/><br/>'.
     		$indicadores[$i]['nombre'].'<br/><br/><p style="font-size:9px;">Aplica Desagregación por Sexo:'.$aux.'<br/>Aplica Gestión Territorial:'.$aux2.'</p>';
    
     	
     		
     	}
     	
     	return $indicador;
     	
     }
     
     public function columnaIndicadorCDCExcel($id){
     	
     	$sql='SELECT t.nombre, cd.nombre AS dimension, ca.nombre AS ambito, proe.gestion_territorial AS territorial, proe.desagregado_sexo AS dsexo 
     	FROM indicadores t INNER JOIN clasificaciones_dimensiones cd ON t.clasificacion_dimension_id = cd.id
     	INNER JOIN clasificaciones_ambitos ca ON t.clasificacion_ambito_id = ca.id
     	INNER JOIN productos_especificos pe ON t.producto_especifico_id = pe.id
     	INNER JOIN subproductos sb ON pe.subproducto_id = sb.id
     	INNER JOIN productos_estrategicos proe ON sb.producto_estrategico_id = proe.id
     	WHERE t.id='.$id.' 
     	UNION
     	SELECT t2.nombre, cd2.nombre AS dimension, ca2.nombre AS ambito, proe2.gestion_territorial AS territorial, proe2.desagregado_sexo AS dsexo
     	FROM indicadores t2 INNER JOIN lineas_accion la ON la.id_indicador = t2.id
     	INNER JOIN productos_estrategicos proe2 ON la.producto_estrategico_id = proe2.id
     	INNER JOIN clasificaciones_dimensiones cd2 ON t2.clasificacion_dimension_id = cd2.id
     	INNER JOIN clasificaciones_ambitos ca2 ON t2.clasificacion_ambito_id = ca2.id WHERE t2.id ='.$id;
     	
     	$indicadores=Yii::app()->db->createCommand($sql)->queryAll();
     	$indicador='';
     	
     	for($i=0; $i<count($indicadores);$i++){
     		
     		$aux='';
     		$aux2='';
     	 	if($indicadores[$i]['dsexo']==0){
     			$aux = 'NO';
     			
     		}else{
     			$aux = 'SI';
     		}
     		
     	 	if($indicadores[$i]['territorial']==0){
     			$aux2 = 'NO';
     			
     		}else{
     			$aux2 = 'SI';
     		}
     		$indicador='<u><i><b>'.'Dimensión '.$indicadores[$i]['dimension'].'</b></i></u><br /><u><i><b>'.'Ámbito '.$indicadores[$i]['ambito'].'</b></i></u><br/><br/><br/>'.
     		$indicadores[$i]['nombre'].'<br/><br/><p style="font-size:9px;">Aplica Desagregación por Sexo:'.$aux.'<br/>Aplica Gestión Territorial:'.$aux2.'</p>';
    
     	
     		
     	}
     	
     	return $indicador;
     	
     }//fin funcion
     
     
     

}// fin crotroller
