<?php

/**
 * This is the model base class for the table "objetivos_estrategicos".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ObjetivosEstrategicos".
 *
 * Columns in table "objetivos_estrategicos" available as properties of the model,
 * followed by relations of table "objetivos_estrategicos" available as properties of the model.
 *
 * @property integer $id
 * @property integer $perspectiva_estrategica_id
 * @property string $nombre
 * @property string $descripcion
 * @property integer $estado
 *
 * @property DesafiosEstrategicos[] $desafiosEstrategicoses
 * @property PerspectivasEstrategicas $perspectivaEstrategica
 * @property ObjetivosMinisteriales[] $objetivosMinisteriales
 * @property ProductosEstrategicos[] $productosEstrategicoses
 */
abstract class BaseObjetivosEstrategicos extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'objetivos_estrategicos';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Objetivos Estrategicos|Objetivos Estrategicoses', $n);
	}

	public static function representingColumn() {
		return 'nombre';
	}

	public function rules() {
		return array(
			array('nombre, descripcion, perspectiva_estrategica_id,objetivosMinisteriales,desafiosEstrategicoses', 'required'),
			array('perspectiva_estrategica_id, estado', 'numerical', 'integerOnly'=>true),
			array('nombre', 'length', 'max'=>200),
			array('perspectiva_estrategica_id', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, perspectiva_estrategica_id, nombre, descripcion, estado', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
            'desafiosEstrategicoses' => array(self::MANY_MANY, 'DesafiosEstrategicos', 'desafios_objetivos(objetivo_estrategico_id, desafio_estrategico_id)','condition' => 'desafiosEstrategicoses.estado = 1'),
            'perspectivaEstrategica' => array(self::BELONGS_TO, 'PerspectivasEstrategicas', 'perspectiva_estrategica_id'),
            'objetivosMinisteriales' => array(self::MANY_MANY, 'ObjetivosMinisteriales', 'objetivos_objetivos(objetivo_estrategico_id, objetivo_ministerial_id)','condition' => 'objetivosMinisteriales.estado = 1'),
            'productosEstrategicoses' => array(self::MANY_MANY, 'ProductosEstrategicos', 'objetivos_productos(objetivo_estrategico_id, producto_estrategico_id)','condition' => 'productosEstrategicoses.estado = 1'),
        );
	}

	public function pivotModels() {
		return array(
			'desafiosEstrategicoses' => 'DesafiosObjetivos',
			'objetivosMinisteriales' => 'ObjetivosObjetivos',
			'productosEstrategicoses' => 'ObjetivosProductos',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'perspectiva_estrategica_id' => 'Perspectiva Estratégica del BSC',
			'nombre' => 'Objetivo estratégico',
			'descripcion' => Yii::t('app', 'Descripción'),
			'estado' => Yii::t('app', 'Estado'),
			'desafiosEstrategicoses' => Yii::t('app', 'desafiosEstrategicoses'),
			'perspectivaEstrategica' => Yii::t('app', 'perspectivaEstrategica'),
			'objetivosMinisteriales' => 'Objetivos Ministeriales Relevantes',
			'productosEstrategicoses' => Yii::t('app', 'productosEstrategicoses'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('perspectiva_estrategica_id', $this->perspectiva_estrategica_id);
		$criteria->compare('nombre', $this->nombre, true);
		$criteria->compare('descripcion', $this->descripcion, true);
		$criteria->compare('estado', 1);
        if(isset(Yii::app()->session['idPeriodo'])){
            $criteria->join='INNER JOIN desafios_objetivos do ON t.id = do.objetivo_estrategico_id
            INNER JOIN desafios_estrategicos de ON do.desafio_estrategico_id = de.id
            INNER JOIN planificaciones pl ON de.planificacion_id = pl.id 
            INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id';
            $criteria->distinct =true;
            $criteria->select='t.*';
            $criteria->condition='pp.id = '.Yii::app()->session['idPeriodo'].' AND t.estado = 1';            
        }else{            
            $criteria->condition='t.id =0';
        }        
		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	
	
	public function buscarObjetivosEstrategicos() {
		$criteria = new CDbCriteria;
	
		$criteria->compare('id', $this->id);
		$criteria->compare('perspectiva_estrategica_id', $this->perspectiva_estrategica_id);
		$criteria->compare('nombre', $this->nombre, true);
		$criteria->compare('descripcion', $this->descripcion, true);
		$criteria->compare('estado', 1);
		if(isset(Yii::app()->session['idPeriodo'])){
			$criteria->join='INNER JOIN desafios_objetivos do ON t.id = do.objetivo_estrategico_id
            INNER JOIN desafios_estrategicos de ON do.desafio_estrategico_id = de.id
            INNER JOIN planificaciones pl ON de.planificacion_id = pl.id
            INNER JOIN periodos_procesos pp ON pl.periodo_proceso_id = pp.id';
			$criteria->distinct =true;
			$criteria->select='t.*';
			$criteria->condition='pp.id = '.Yii::app()->session['idPeriodo'].' AND t.estado = 1';
		}else{
			$criteria->condition='t.id =0';
		}
		
		$objetivosestrategicos=ObjetivosEstrategicos::model()->findAll($criteria);
		
		return $objetivosestrategicos;
	}

    public function getRelatedProductosEstrategicos(){        
        
            $out=GxHtml::openTag('ul');
            foreach($this->productosEstrategicoses as $prodEstra){
                if($prodEstra->estado==1){
                    $out.= GxHtml::openTag('li');
                    $out.= GxHtml::link(GxHtml::encode(GxHtml::valueEx($prodEstra)), array('/productosEstrategicos/ver/', 'id' => $prodEstra->id));
                    $out.= GxHtml::closeTag('li');
                }                            
            }
            $out.= GxHtml::closeTag('ul');
                    
          if(!$this->productosEstrategicoses)
                $out='<span class="null">No asignado</span>';          
           return $out;        
    }
    
    public function getRelatedObjetivosMinisteriales()
        {
           $out=GxHtml::openTag('ul');
            foreach($this->objetivosMinisteriales as $relatedModel) {
                $out.= GxHtml::openTag('li');
                $out.= GxHtml::encode(GxHtml::valueEx($relatedModel));
                $out.= GxHtml::closeTag('li');
            }
            $out.= GxHtml::closeTag('ul');
          if(!$this->objetivosMinisteriales)
                $out='<span class="null">No asignado</span>';
          
           return $out;
        }
        
     public function getRelatedDesafiosEstrategicos()
        {
           $out=GxHtml::openTag('ul');
            foreach($this->desafiosEstrategicoses as $relatedModel) {
                $out.= GxHtml::openTag('li');
                $out.= GxHtml::encode(GxHtml::valueEx($relatedModel));
                $out.= GxHtml::closeTag('li');
            }
            $out.= GxHtml::closeTag('ul');
          if(!$this->desafiosEstrategicoses)
                $out='<span class="null">No asignado</span>';
          
           return $out;
        }
}