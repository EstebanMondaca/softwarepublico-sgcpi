<?php

/**
 * This is the model base class for the table "actividades".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Actividades".
 *
 * Columns in table "actividades" available as properties of the model,
 * followed by relations of table "actividades" available as properties of the model.
 *
 * @property integer $id
 * @property integer $indicador_id
 * @property string $nombre
 * @property string $verificacion
 * @property integer $cantidad
 * @property integer $estado
 *
 * @property Indicadores $indicador
 * @property ItemesPresupuestarios[] $itemesPresupuestarioses
 */
abstract class BaseActividades extends GxActiveRecord {

	public $documento, $esperadoX,$avanceActual,$idHito,$avanceAnterior,$mesActual, $value, $actividad;
		
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'actividades';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Actividades|Actividades', $n);
	}

	public static function representingColumn() {
		return 'nombre';
	}

	public function rules() {
        return array(
        	//array('documento', 'file', 'types'=>'pdf'),//RCP Se ha comentado porque este campo no existe en la DB de actividades
            array('nombre', 'required'),
            array('indicador_id, cantidad, estado, actividad_parent,avance_anterior, avance_actual', 'numerical', 'integerOnly'=>true),
            array('nombre', 'length', 'max'=>200),
            array('fecha_inicio, fecha_termino, descripcion', 'safe'),
            array('indicador_id, estado, actividad_parent, fecha_inicio, fecha_termino, descripcion,avance_anterior, avance_actual', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, indicador_id, nombre, verificacion, cantidad, estado, actividad_parent, fecha_inicio, fecha_termino, descripcion,descripcion, avance_anterior, avance_actual', 'safe', 'on'=>'search'),
        );
    } 

	public function relations() {
		return array(
			'indicador' => array(self::BELONGS_TO, 'Indicadores', 'indicador_id'),
			'actividad' => array(self::BELONGS_TO, 'Actividades', 'actividad_parent'),
			'itemesPresupuestarioses' => array(self::MANY_MANY, 'ItemesPresupuestarios', 'itemes_actividades(actividad_id, item_presupuestario_id)','condition'=>'itemesPresupuestarioses.estado=1'),
		    'itemesActividades' => array(self::HAS_MANY, 'ItemesActividades', 'actividad_id'),  
        );
	}

	public function pivotModels() {
		return array(
			'itemesPresupuestarioses' => 'ItemesActividades',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'indicador_id' => null,
			'nombre' => Yii::t('app', 'Nombre'),
			'verificacion' => Yii::t('app', 'Verificacion'),
			'cantidad' => Yii::t('app', 'Cantidad'),
			'estado' => Yii::t('app', 'Estado'),
			'indicador' => null,
			'actividad_parent' => Yii::t('app', 'Actividad Predecesora'),
            'fecha_inicio' => Yii::t('app', 'Inicio'),
            'fecha_termino' => Yii::t('app', 'TÃ©rmino'),
            'descripcion' => Yii::t('app', 'Descripcion'),
			'itemesPresupuestarioses' => null,
			'avance_anterior' => Yii::t('app', 'Avance Anterior'),
            'avance_actual' => Yii::t('app', 'Avance Actual'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('indicador_id', $this->indicador_id);
		$criteria->compare('nombre', $this->nombre, true);
		$criteria->compare('verificacion', $this->verificacion, true);
		$criteria->compare('cantidad', $this->cantidad);
		$criteria->compare('estado', 1);
        $criteria->compare('actividad_parent', $this->actividad_parent);
        $criteria->compare('fecha_inicio', $this->fecha_inicio, true);
        $criteria->compare('fecha_termino', $this->fecha_termino, true);
        $criteria->compare('descripcion', $this->descripcion, true); 
        $criteria->compare('avance_anterior', $this->avance_anterior);
        $criteria->compare('avance_actual', $this->avance_actual);
        //$criteria->condition='t.estado = 1 AND indicador_id=8';
		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
    
    public function getRelatedItemesActividades()
        {
           $out=GxHtml::openTag('ul');
            foreach($this->itemesActividades as $relatedModel) {
                $out.= GxHtml::openTag('li');
                $out.= GxHtml::encode(GxHtml::valueEx($relatedModel->itemesPresupuestarios)).": ".$relatedModel->monto;
                $out.= GxHtml::closeTag('li');
            }
            $out.= GxHtml::closeTag('ul');
          if(!$this->itemesActividades)
                $out='<span class="null">No asignado</span>';
          
           return $out;
        }
        
	public function actividadesHitos($mes, $id_indicador) {
		$criteria = new CDbCriteria;
		$criteria->select='t.nombre, CONCAT(t.nombre, " ", t.descripcion) AS actividad, t.fecha_inicio, t.fecha_termino, h.avance_actual';
		$criteria->join = 'INNER JOIN hitos_actividades h ON t.id = h.id_actividad';
		$criteria->condition = 't.estado = 1';
		$criteria->compare('h.actividad_mes', $mes);
		$criteria->compare('indicador_id', $id_indicador);
		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
    
}